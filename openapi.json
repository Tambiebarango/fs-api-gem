{
  "openapi": "3.0.1",
  "info": {
    "title": "Fullscript API Reference",
    "version": "v2",
    "termsOfService": "https://api-dashboard.fullscript.io/",
    "contact": {
      "name": "API Support",
      "email": "api-support@fullscript.com",
      "url": "https://api-dashboard.fullscript.io/"
    },
    "x-logo": {
      "url": "https://fullscript.com/wp-content/uploads/2017/08/full-color.svg",
      "altText": "Fullscript Integrate"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development"
    },
    {
      "url": "https://api-us-snd.fullscript.io",
      "description": "US Sandbox (testing)"
    },
    {
      "url": "https://api-ca-snd.fullscript.io",
      "description": "CA Sandbox (testing)"
    },
    {
      "url": "https://api-us.fullscript.io",
      "description": "US Production"
    },
    {
      "url": "https://api-ca.fullscript.io",
      "description": "CA Production"
    }
  ],
  "paths": {
    "/api/catalog/allergens": {
      "get": {
        "tags": [
          "Allergens"
        ],
        "summary": "List all allergens",
        "description": "This resource allows you to list all allergens.",
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "allergens": [
                    {
                      "id": "x5x447x4-x904-4060-83xx-26x5xx9819x7",
                      "name": "Sugar Free"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "allergens": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Allergen"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/allergens/{id}": {
      "get": {
        "tags": [
          "Allergens"
        ],
        "summary": "Retrieve an allergen",
        "description": "Retrieves details for an existing allergen.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the allergen",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "allergen": {
                    "id": "x5x447x4-x904-4060-83xx-26x5xx9819x7",
                    "name": "Sugar Free"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "allergen": {
                      "$ref": "#/components/schemas/Allergen"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "List all brands",
        "description": "This resource allows you to list all brands.",
        "parameters": [
          {
            "name": "available",
            "in": "query",
            "required": false,
            "description": "Takes an argument of `true` to return brands that have available products.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clinic_permitted",
            "in": "query",
            "required": false,
            "description": "Takes an argument of `true` to return brands the current clinic has access to.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "brands": [
                    {
                      "id": "x0x50x8x-711x-43xx-85xx-5xx80365xxxx",
                      "name": "BioBrand",
                      "prefix": "BIO",
                      "status": "available"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "brands": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Brand"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/brands/{id}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Retrieve a brand",
        "description": "Retrieves details for an existing brand.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Brand",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "brand": {
                    "id": "x0x50x8x-711x-43xx-85xx-5xx80365xxxx",
                    "name": "BioBrand",
                    "prefix": "BIO",
                    "status": "unavailable"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "brand": {
                      "$ref": "#/components/schemas/Brand"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "List all Ingredients",
        "description": "This resource allows you to list all ingredients.",
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "ingredients": [
                    {
                      "id": "x5x447x4-x904-4060-83xx-26x5xx9819x7",
                      "name": "Vitamin A"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "ingredients": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ingredient"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/ingredients/{id}": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Retrieve an ingredient",
        "description": "Retrieves details for an existing ingredient.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the ingredient",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "ingredient": {
                    "id": "x5x447x4-x904-4060-83xx-26x5xx9819x7",
                    "name": "Vitamin A"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "ingredient": {
                      "$ref": "#/components/schemas/Ingredient"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/practitioner_types": {
      "get": {
        "tags": [
          "Practitioner Types"
        ],
        "summary": "List all practitioner types",
        "description": "This resource allows you to list all practitioner types.",
        "responses": {
          "200": {
            "description": "returns valid json",
            "content": {
              "application/json": {
                "example": {
                  "practitioner_types": [
                    {
                      "id": "x1x0196x-5615-4874-xxx4-48x459180x09",
                      "code": "ND",
                      "description": "Naturopathic Doctor"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "practitioner_types": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PractitionerType"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List all products",
        "description": "This resource allows you to list all products.",
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "products": [
                    {
                      "id": "113741x6-224x-4xx8-xx5x-80629x155192",
                      "name": "Vitamin C",
                      "brand": {
                        "id": "x0x50x8x-711x-43xx-85xx-5xx80365xxxx",
                        "name": "BioBrand",
                        "prefix": "BIO"
                      },
                      "primary_variant": {
                        "id": "xx2688x2-4303-4278-xx73-x7083x6146x2",
                        "sku": "819d1ab3abc0a21cffd798ec925ba50d",
                        "primary": true,
                        "units": null,
                        "unit_of_measure": null,
                        "availability": "n/a",
                        "status": "unavailable",
                        "upc": null,
                        "msrp": "19.99",
                        "supplier_sku": null,
                        "image_url_small": "/assets/noimage/product.png",
                        "image_url_medium": "/assets/noimage/product.png",
                        "image_url_large": "/assets/noimage/product.png"
                      },
                      "variant_count": 1,
                      "status": "unavailable"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a product",
        "description": "Retrieves an existing product. If the practitioner has set custom dosage instructions for the product, the `custom_dosage` object is included in the response. Specify the pracitioner with `practitioner_id` (defaults to current practitioner, when applicable).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the Product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "practitioner_id",
            "in": "query",
            "required": false,
            "description": "Unique Practitioner ID. Include to retrieve a specific practitioner's custom dosage instructions for the product. Defaults to the practitioner who owns current access token, if applicable (access token's resource owner type is `Practitioner`). Custom dosage is returned in the `custom_dosage` object.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "product": {
                    "id": "113741x6-224x-4xx8-xx5x-80629x155192",
                    "name": "Vitamin C",
                    "description_html": "Easy to swallow vitamin c capsules.",
                    "brand": {
                      "id": "x0x50x8x-711x-43xx-85xx-5xx80365xxxx",
                      "name": "BioBrand",
                      "prefix": "BIO"
                    },
                    "variants": [
                      {
                        "id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                        "sku": "20xx9193488",
                        "primary": true,
                        "units": null,
                        "unit_of_measure": null,
                        "availability": "In Stock",
                        "status": "available",
                        "upc": null,
                        "msrp": "19.99",
                        "supplier_sku": null
                      }
                    ],
                    "dosage": {
                      "recommended_amount": "10-60",
                      "recommended_frequency": "four times per day",
                      "recommended_duration": "as needed",
                      "format": "drop",
                      "additional_info": "with meals"
                    },
                    "custom_dosage": null
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/search/products": {
      "get": {
        "tags": [
          "Product search"
        ],
        "summary": "Search for products",
        "description": "This resource allows you to search for products using Fullscript's elasticsearch implementation. This endpoint takes into consideration brand segmentation (not all clinics have access to all brands) and will only show products and brands that your clinic has available to them. <br /> <br /> **Note**: Filter arguments that accept an array can be specified in the query string like this: <br /> `?allergen_ids[]=id_1&allergen_ids[]=id_2`",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "description": "Search for products matching a query string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allergen_ids",
            "in": "query",
            "required": false,
            "description": "Provide an array of allergen ids to filter results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brand_id",
            "in": "query",
            "required": false,
            "description": "Search for products by brand_id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ingredient_ids",
            "in": "query",
            "required": false,
            "description": "Provide an array of ingredient ids to filter results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplement_type_ids",
            "in": "query",
            "required": false,
            "description": "Provide an array of supplement type ids to filter results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "third_party_certification_ids",
            "in": "query",
            "required": false,
            "description": "Provide an array of third party certification ids to filter results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "products": [
                    {
                      "id": "113741x6-224x-4xx8-xx5x-80629x155192",
                      "name": "Vitamin C",
                      "brand": {
                        "id": "x0x50x8x-711x-43xx-85xx-5xx80365xxxx",
                        "name": "BioBrand",
                        "prefix": "BIO"
                      },
                      "primary_variant": {
                        "id": "xx2688x2-4303-4278-xx73-x7083x6146x2",
                        "sku": "819d1ab3abc0a21cffd798ec925ba50d",
                        "primary": true,
                        "units": null,
                        "unit_of_measure": null,
                        "availability": "In Stock",
                        "status": "available",
                        "upc": null,
                        "msrp": "19.99",
                        "supplier_sku": null,
                        "image_url_small": "/assets/noimage/product.png",
                        "image_url_medium": "/assets/noimage/product.png",
                        "image_url_large": "/assets/noimage/product.png"
                      },
                      "variant_count": 1,
                      "status": "available"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/products/{product_id}/similar": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List similar products",
        "description": "This endpoint allows you to list similar products that have been curated by Fullscript's licensed health professionals. It is in order from most to least popular.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the Product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "products": [
                    {
                      "id": "x1x50x8x-711x-43xx-85xx-5xx80365xxxx",
                      "name": "Vitamin C plus",
                      "brand": {
                        "id": "x0x50x8x-711x-43xx-85xx-5xx80365xxxx",
                        "name": "BioBrand",
                        "prefix": "BIO"
                      },
                      "primary_variant": {
                        "id": "xx2688x2-4303-4278-xx73-x7083x6146x2",
                        "sku": "819d1ab3abc0a21cffd798ec925ba50d",
                        "primary": true,
                        "units": null,
                        "unit_of_measure": null,
                        "availability": "n/a",
                        "status": "unavailable",
                        "upc": null,
                        "msrp": "19.99",
                        "supplier_sku": null,
                        "image_url_small": "/assets/noimage/product.png",
                        "image_url_medium": "/assets/noimage/product.png",
                        "image_url_large": "/assets/noimage/product.png"
                      },
                      "variant_count": 1,
                      "status": "unavailable"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/supplement_types": {
      "get": {
        "tags": [
          "Supplement Types"
        ],
        "summary": "List all supplement types",
        "description": "This resource allows you to list all supplement types.",
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "supplement_types": [
                    {
                      "id": "x5x447x4-x904-4060-83xx-26x5xx9819x7",
                      "name": "vitamins"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "supplement_types": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SupplementType"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/supplement_types/{id}": {
      "get": {
        "tags": [
          "Supplement Types"
        ],
        "summary": "Retrieve a supplement type",
        "description": "Retrieves details for an existing supplement type.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the supplement type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "supplement_type": {
                    "id": "x5x447x4-x904-4060-83xx-26x5xx9819x7",
                    "name": "vitamins"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "supplement_type": {
                      "$ref": "#/components/schemas/SupplementType"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/third_party_certifications": {
      "get": {
        "tags": [
          "Third Party Certifications"
        ],
        "summary": "List all third party certifications",
        "description": "This resource allows you to list all third party certifications.",
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "third_party_certifications": [
                    {
                      "id": "x5x447x4-x904-4060-83xx-26x5xx9819x7",
                      "name": "Certified Halal"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "third_party_certifications": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ThirdPartyCertification"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/third_party_certifications/{id}": {
      "get": {
        "tags": [
          "Third Party Certifications"
        ],
        "summary": "Retrieve a third party certification",
        "description": "Retrieves details for an existing third party certification.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the third party certification",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "third_party_certification": {
                    "id": "x5x447x4-x904-4060-83xx-26x5xx9819x7",
                    "name": "Certified Halal"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "third_party_certification": {
                      "$ref": "#/components/schemas/ThirdPartyCertification"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/catalog/variants/{id}": {
      "get": {
        "tags": [
          "Variants"
        ],
        "summary": "Retrieve a variant",
        "description": "Retrieves an existing variant.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the Variant.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "variant": {
                    "id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                    "sku": "819d1ab3abc0a21cffd798ec925ba50c",
                    "primary": true,
                    "units": null,
                    "unit_of_measure": null,
                    "availability": "In Stock",
                    "status": "available",
                    "upc": null,
                    "msrp": "19.99",
                    "supplier_sku": null,
                    "image_url_small": "/assets/noimage/product.png",
                    "image_url_medium": "/assets/noimage/product.png",
                    "image_url_large": "/assets/noimage/product.png",
                    "product": {
                      "id": "113741x6-224x-4xx8-xx5x-80629x155192",
                      "name": "Vitamin C",
                      "brand": {
                        "id": "x0x50x8x-711x-43xx-85xx-5xx80365xxxx",
                        "name": "BioBrand",
                        "prefix": "BIO"
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "variant": {
                      "$ref": "#/components/schemas/Variant"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/treatment_plans/{treatment_plan_id}/activate": {
      "patch": {
        "tags": [
          "Treatment Plans"
        ],
        "summary": "Activate a treatment plan",
        "description": "Activates a draft Treatment Plan for a patient.",
        "parameters": [
          {
            "name": "treatment_plan_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Treatment plan.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for patch \"2019-03-24\"",
            "content": {
              "application/json": {
                "example": {
                  "treatment_plan": {
                    "id": "xx45x0xx-x840-41xx-9922-98xx6001507x",
                    "state": "active",
                    "patient": {
                      "id": "x1x0196x-5615-4874-xxe4-48x459180x09"
                    },
                    "practitioner": {
                      "id": "x1x0196x-5615-4874-xxx4-48x459180x09"
                    },
                    "available_at": "2018-03-02",
                    "created_at": "2020-01-01T05:00:00.000Z",
                    "updated_at": "2020-01-01T05:00:00.000Z",
                    "invitation_url": "http://localhost:3000/welcome/test-store-236/9126ae194f",
                    "recommendations": [
                      {
                        "variant_id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                        "refill": false,
                        "units_to_purchase": 10,
                        "dosage": {
                          "amount": "1-2",
                          "frequency": "once per day",
                          "duration": null,
                          "format": "capsule",
                          "additional_info": "with food"
                        }
                      }
                    ],
                    "personal_message": null,
                    "metadata": {
                      "id": null
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "treatment_plan": {
                      "$ref": "#/components/schemas/TreatmentPlan"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/treatment_plans/{treatment_plan_id}/cancel": {
      "patch": {
        "tags": [
          "Treatment Plans"
        ],
        "summary": "Cancel a treatment plan",
        "description": "Cancels an active Treatment Plan for a patient.",
        "parameters": [
          {
            "name": "treatment_plan_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Treatment plan.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for patch \"2019-03-24\"",
            "content": {
              "application/json": {
                "example": {
                  "treatment_plan": {
                    "id": "xx45x0xx-x840-41xx-9922-98xx6001507x",
                    "state": "cancelled",
                    "patient": {
                      "id": "x1x0196x-5615-4874-xxe4-48x459180x09"
                    },
                    "practitioner": {
                      "id": "x1x0196x-5615-4874-xxx4-48x459180x09"
                    },
                    "available_at": "2018-03-02",
                    "created_at": "2020-01-01T05:00:00.000Z",
                    "updated_at": "2020-01-01T05:00:00.000Z",
                    "invitation_url": "http://localhost:3000/welcome/test-store-259/045d0c035b",
                    "recommendations": [

                    ],
                    "personal_message": null,
                    "metadata": {
                      "id": null
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "treatment_plan": {
                      "$ref": "#/components/schemas/TreatmentPlan"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/categories/{category_id}/products": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "List all category products",
        "description": "This resource allows you to list all of a category's products.",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "products": [
                    {
                      "id": "113741x6-224x-4xx8-xx5x-80629x155192",
                      "name": "Vitamin C",
                      "brand": {
                        "id": "x0x50x8x-711x-43xx-85xx-5xx80365xxxx",
                        "name": "BioBrand",
                        "prefix": "BIO"
                      },
                      "primary_variant": {
                        "id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                        "sku": "ABC",
                        "primary": true,
                        "units": null,
                        "unit_of_measure": null,
                        "availability": "n/a",
                        "status": "unavailable",
                        "upc": null,
                        "msrp": "19.99",
                        "supplier_sku": null,
                        "image_url_small": "/assets/noimage/product.png",
                        "image_url_medium": "/assets/noimage/product.png",
                        "image_url_large": "/assets/noimage/product.png"
                      },
                      "variant_count": 1,
                      "status": "unavailable"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Retrieve a Category",
        "description": "Retrieves an existing Category.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the Category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "category": {
                    "id": "x3x0196x-5615-4874-xxx4-48x459180x09",
                    "name": "Allergy Relief",
                    "product_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "List all categories",
        "description": "This resource allows you to list all of a clinic's categories.",
        "responses": {
          "200": {
            "description": "returns the correct json for base v2",
            "content": {
              "application/json": {
                "example": {
                  "categories": [
                    {
                      "id": "x3x0196x-5615-4874-xxx4-48x459180x09",
                      "name": "Allergy Relief"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic": {
      "get": {
        "tags": [
          "Clinic"
        ],
        "summary": "Retrieve a clinic",
        "description": "This endpoints retrieves information about the clinic provided from the <code>X-FS-Clinic-Key</code>.",
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "clinic": {
                    "id": "xx7x357x-9x36-xxxx-x553-7x3xx398xxx",
                    "name": "Dr. Example's Clinic",
                    "patient_count": 0,
                    "practitioner_count": 1,
                    "discount": 0,
                    "dispensary_url": "https://api-us-snd.fullscript.io/login/drexamplesclinic",
                    "integration_id": "x1x0196x-5615-4874-xxx4-48x459180x09",
                    "integration_activated_at": "2018-10-10T04:00:00.000Z"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "clinic": {
                      "$ref": "#/components/schemas/Clinic"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/dynamic_links/treatment_plans": {
      "get": {
        "tags": [
          "Dynamic link"
        ],
        "summary": "Retrieve a new Treatment Plan link",
        "description": "Returns a `redirect_url` for a new treatment plan.",
        "responses": {
          "200": {
            "description": "returns url for treatment plan new",
            "content": {
              "application/json": {
                "example": {
                  "redirect_url": "http://www.example.com/o/treatment_plans/new?client_id=83x92x21xx29x643xx9954x8x2xx651xxx87x66521x08x9x2x408x26x801x394"
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "redirect_url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dynamic link"
        ],
        "summary": "Create a Draft Treatment Plan Link",
        "description": "Returns a `redirect_url` for a draft treatment. It will optionally find or create a patient for use in the treatment plan. \n\nYou must have the `patients:write` OAuth scope if the request you make creates a patient. To access the endpoint you must also have the `clinic:write` OAuth scope. \n",
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "returns url for treatment plan new with patient",
            "content": {
              "application/json": {
                "example": {
                  "dynamic_links": {
                    "redirect_url": "http://www.example.com/o/treatment_plans/VHJlYXRtZW50UGxhbi0xMDEwMTA=/edit",
                    "treatment_plan": {
                      "id": "x1x01x6x-5615-4874-xxx4-48x459180x09",
                      "state": "draft",
                      "available_at": null
                    },
                    "patient": {
                      "id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                      "first_name": "Example",
                      "last_name": "Patient",
                      "email": "johndoe@fakemail.com",
                      "archived": false,
                      "date_of_birth": null,
                      "gender": null,
                      "discount": 0,
                      "total_discount": 0,
                      "mobile_number": "",
                      "text_message_notification": 0
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "dynamic_links": {
                      "$ref": "#/components/schemas/DynamicLink"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "treatment_plan": {
                    "type": "object",
                    "properties": {
                      "practitioner_id": {
                        "description": "Practitioner's id used to create the draft `treatment_plan`.",
                        "type": "string"
                      }
                    },
                    "description": "Treatment plan information for dynamic link.",
                    "required": [
                      "practitioner_id"
                    ]
                  },
                  "patient": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "description": "Unique Email for the Patient.",
                        "type": "string"
                      },
                      "first_name": {
                        "description": "Patient's first name.",
                        "type": "string"
                      },
                      "last_name": {
                        "description": "Patient's last name.",
                        "type": "string"
                      },
                      "date_of_birth": {
                        "description": "Patient's date of birth in the format `yyyy-mm-dd`.",
                        "type": "string"
                      },
                      "gender": {
                        "description": "Gender of the patient. Valid options are 'male', 'female', or 'x'.",
                        "type": "string"
                      },
                      "mobile_number": {
                        "description": "Patient's mobile number in the format `+12223334444`.",
                        "type": "string"
                      },
                      "discount": {
                        "description": "Patient discount level (in percentage). This discount does not include the clinic discount. Defaults to 0.",
                        "type": "string"
                      },
                      "send_welcome_email": {
                        "description": "Sends a welcome email upon successful patient creation and treatment plan creation. Defaults to true.",
                        "type": "string"
                      }
                    },
                    "description": "Find or create a Patient."
                  }
                },
                "required": [
                  "treatment_plan"
                ]
              }
            }
          }
        }
      }
    },
    "/api/clinic/dynamic_links/treatment_plans/{id}": {
      "get": {
        "tags": [
          "Dynamic link"
        ],
        "summary": "Retrieve a Treatment Plan Link",
        "description": "Returns a `redirect_url` for editing an existing treatment plan. The treatment plan provided must have a `state` of `draft` or `active`. \n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Treatment Plan",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns url for existing treatment plan",
            "content": {
              "application/json": {
                "example": {
                  "dynamic_links": {
                    "redirect_url": "http://www.example.com/o/treatment_plans/VHJlYXRtZW50UGxhbi0xMDEwMTA=/edit",
                    "treatment_plan": {
                      "id": "x1x01x6x-5615-4874-xxx4-48x459180x09",
                      "state": "active",
                      "available_at": "2019-10-16"
                    },
                    "patient": {
                      "id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                      "first_name": "Example",
                      "last_name": "Patient",
                      "email": "patient@example.com",
                      "archived": false,
                      "date_of_birth": null,
                      "gender": null,
                      "discount": 0,
                      "total_discount": 0,
                      "mobile_number": "",
                      "text_message_notification": 0
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "dynamic_links": {
                      "$ref": "#/components/schemas/DynamicLink"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/metadata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Find objects",
        "description": "To look up objects by your system's identifier. The object type and ID can be provided to filter results.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "Your system's identifier.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "The type of object. Can be one of `patient`, `practitioner`, `staff`, or `treatment_plan`.",
            "schema": {
              "type": "object",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Patient"
                },
                {
                  "$ref": "#/components/schemas/Practitioner"
                },
                {
                  "$ref": "#/components/schemas/Staff"
                },
                {
                  "$ref": "#/components/schemas/TreatmentPlan"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for V2",
            "content": {
              "application/json": {
                "example": {
                  "metadata": [
                    {
                      "id": "9999-9999-9999",
                      "type": "patient",
                      "data": {
                        "id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                        "first_name": "Example",
                        "last_name": "Patient",
                        "email": "patient@example.com",
                        "archived": false,
                        "date_of_birth": null,
                        "gender": null,
                        "discount": 0,
                        "total_discount": 0,
                        "mobile_number": null,
                        "text_message_notification": true,
                        "metadata": {
                          "id": "9999-9999-9999"
                        }
                      }
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Metadatum"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "List all orders",
        "description": "This resource returns all orders for the clinic and can be filtered by the following attributes.",
        "parameters": [
          {
            "name": "patient_id",
            "in": "query",
            "required": false,
            "description": "Filter orders by `patient_id`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "treatment_plan_id",
            "in": "query",
            "required": false,
            "description": "Filter orders by `treatment_plan_id`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "completed_at",
            "in": "query",
            "required": false,
            "description": "Filter orders by `completed_at`.  The date must be formatted as follows `yyyy-mm-dd`. \n - less than: Return orders where the `completed_at` date is less than. `<yyyy-mm-dd`.\n - greater than: Return orders where the `completed_at` date is greater than. `>yyyy-mm-dd`.\n - within a range: Return orders where the `completed_at` date is with in a range. `yyyy-mm-dd..yyyy-mm-dd`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_number",
            "in": "query",
            "required": false,
            "description": "Filter orders by `order_number`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Accepts one of the following arguments: `patient_id`, `treatment_plan_id`, `completed_at` and `order_number`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Ordering defaults to `ASC` and can take an argument of `ASC` or `DESC`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns the correct json for base v2",
            "content": {
              "application/json": {
                "example": {
                  "orders": [
                    {
                      "id": "391xx4xx-67x5-44x2-8x2x-8886x20x083x",
                      "order_number": "R000000000",
                      "completed_at": "2018-03-02T13:26:02.000-05:00",
                      "treatment_plan_ids": [
                        "xx45x0xx-x840-41xx-9922-98xx6001507x"
                      ],
                      "variant_ids": [
                        "xx2688x2-4303-4278-xx73-x7083x6146x1"
                      ],
                      "patient_id": "x1x0196x-5615-4874-xxe4-48x459180x09"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve an Order",
        "description": "Retrieves an existing Order.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the Order.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "order": {
                    "id": "391xx4xx-67x5-44x2-8x2x-8886x20x083x",
                    "order_number": "R000000000",
                    "completed_at": "2018-03-02T13:26:02.000-05:00",
                    "treatment_plan_ids": [
                      "xx45x0xx-x840-41xx-9922-98xx6001507x"
                    ],
                    "patient_id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                    "item_total": "59.97",
                    "msrp_total": "59.97",
                    "payment_total": "64.96",
                    "line_items": [
                      {
                        "variant_id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                        "quantity": 3
                      }
                    ]
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "order": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/patients/{patient_id}/addresses": {
      "get": {
        "tags": [
          "Address"
        ],
        "summary": "List All Patient Addresses",
        "description": "The address object contains a record of all addresses that belong to a patient.",
        "parameters": [
          {
            "name": "patient_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the patient.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "should get all of the addresses for a given patient",
            "content": {
              "application/json": {
                "example": {
                  "addresses": [
                    {
                      "id": "c7323855-3e77-4829-b1ec-83cd14e09ea2",
                      "address1": "8445 E. Hartford Dr.",
                      "address2": null,
                      "zipcode": "85255",
                      "city": "Scottsdale",
                      "state": "AZ",
                      "country": "US"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Address"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/patients/{patient_id}/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "List all patient orders",
        "description": "The patient order object contains a record of all completed or refunded orders that belong to a patient.",
        "parameters": [
          {
            "name": "patient_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Patient",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "orders": [
                    {
                      "id": "391xx4xx-67x5-44x2-8x2x-8886x20x083x",
                      "order_number": "R000000000",
                      "completed_at": "2018-03-02T13:26:02.000-05:00",
                      "treatment_plan_ids": [
                        "xx45x0xx-x840-41xx-9922-98xx6001507x"
                      ],
                      "variant_ids": [
                        "xx2688x2-4303-4278-xx73-x7083x6146x1"
                      ]
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/patients/{patient_id}/treatment_plans": {
      "get": {
        "tags": [
          "Treatment Plans"
        ],
        "summary": "List all patient treatment plans",
        "description": "This resource allows you to list all of a patient's treatment plans.",
        "parameters": [
          {
            "name": "patient_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Patient",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Accepts one of the following arguments: `created_at` or `updated_at`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Ordering defaults to `ASC` and can take an argument of `ASC` or `DESC`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for patch \"2020-02-14\"",
            "content": {
              "application/json": {
                "example": {
                  "treatment_plans": [
                    {
                      "id": "xx45x0xx-x840-41xx-9922-98xx6001507x",
                      "state": "active",
                      "patient": {
                        "id": "x1x0196x-5615-4874-xxe4-48x459180x09"
                      },
                      "practitioner": {
                        "id": "x1x0196x-5615-4874-xxx4-48x459180x09"
                      },
                      "available_at": "2018-03-02",
                      "created_at": "2020-01-01T05:00:00.000Z",
                      "updated_at": "2020-01-01T05:00:00.000Z"
                    },
                    {
                      "id": "x1x01x6x-5615-4874-xxx4-48x459180x09",
                      "state": "active",
                      "patient": {
                        "id": "x1x0196x-5615-4874-xxe4-48x459180x09"
                      },
                      "practitioner": {
                        "id": "x1x0196x-5615-4874-xxx4-48x459180x09"
                      },
                      "available_at": "2020-01-01",
                      "created_at": "2020-01-01T05:00:00.000Z",
                      "updated_at": "2020-01-01T05:00:00.000Z"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 2
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "treatment_plans": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TreatmentPlan"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Treatment Plans"
        ],
        "summary": "Create a patient treatment plan",
        "description": "Creates a new Treatment Plan for a patient.",
        "parameters": [
          {
            "name": "patient_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Patient.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "returns valid json for patch \"2020-02-14\"",
            "content": {
              "application/json": {
                "example": {
                  "treatment_plan": {
                    "id": "70x0x171-xxxx-4xx8-xxx6-79391x5xx8xx",
                    "state": "active",
                    "patient": {
                      "id": "x1x0196x-5615-4874-xxe4-48x459180x09"
                    },
                    "practitioner": {
                      "id": "x1x0196x-5615-4874-xxx4-48x459180x09"
                    },
                    "available_at": "2020-01-01",
                    "created_at": "2020-01-01T05:00:00.000Z",
                    "updated_at": "2020-01-01T05:00:00.000Z",
                    "invitation_url": "http://localhost:3000/welcome/test-store-532/3cc550e467",
                    "recommendations": [
                      {
                        "variant_id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                        "refill": true,
                        "units_to_purchase": 1,
                        "dosage": {
                          "amount": "1-2",
                          "frequency": "once per day",
                          "duration": "as needed",
                          "format": "capsule",
                          "additional_info": "with food"
                        }
                      }
                    ],
                    "personal_message": "Take with a meal. Not on an empty stomach. Try to take this at the same time every day for best results.",
                    "metadata": {
                      "id": "123"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "treatment_plan": {
                      "$ref": "#/components/schemas/TreatmentPlan"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "practitioner_id": {
                    "type": "string",
                    "description": "Unique practitioner ID. Required if the current access token's resource owner type is `Staff` or `Clinic`. Otherwise defaults to the practitioner who owns the token, but can be specified to create the plan on behalf of a different practitioner."
                  },
                  "personal_message": {
                    "type": "string",
                    "description": "A personal message that a practitioner can attach to the treatment plan."
                  },
                  "state": {
                    "type": "string",
                    "description": "The state of the treatment plan. Takes an option of `draft` or `active`. Defaults to active if null. The value `draft` allows to create a draft treatment plan. The value `active` or null creates an active treatment plan."
                  },
                  "recommendations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "variant_id": {
                          "description": "Unique ID for the Variant.",
                          "type": "string"
                        },
                        "units_to_purchase": {
                          "description": "Quantity (number of units) of variant to recommend.",
                          "type": "string"
                        },
                        "refill": {
                          "description": "Send refill reminders?",
                          "type": "string"
                        },
                        "dosage": {
                          "description": "Dosage information for the for the recommednation.",
                          "type": "object",
                          "properties": {
                            "amount": {
                              "description": "The dose to take. Expects numbers but can include a range or a fraction (e.g. `1`, or `1-2`, or `1/2` are all valid).",
                              "type": "string"
                            },
                            "frequency": {
                              "description": "The frequency with which to take the dose. This can be any of the following strings: `once per day`, `twice per day`, `three times per day`, `four times per day`, `every morning`, or `every night`.",
                              "type": "string"
                            },
                            "duration": {
                              "description": "The period for which to take the dose. This can be the number of days (e.g. `120` for `4 months`) or it can be any of the following strings: `as needed`, `until symptoms resolve`, or `ongoing`.",
                              "type": "string"
                            },
                            "additional_info": {
                              "description": "Extra instructions for taking dose (e.g. With meals).",
                              "type": "string"
                            },
                            "format": {
                              "description": "Format of the recommended dose. This can be any of the following strings: `capsule`, `chewable`, `gel`, `liquid`, `lozenge`, `packet`, `pellet`, `drops`, `powder`, `strip`, `suppository`, or `tablet`.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "required": [
                        "variant_id",
                        "units_to_purchase"
                      ]
                    },
                    "description": "Rx plan for a product."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Your system's unique treatment_plan identifier.",
                        "type": "string"
                      }
                    },
                    "description": "Metadata to be attached to the treatment_plan."
                  }
                },
                "required": [
                  "recommendations"
                ]
              }
            }
          }
        }
      }
    },
    "/api/clinic/patients": {
      "get": {
        "tags": [
          "Patients"
        ],
        "summary": "List all patients",
        "description": "This resource allows you to list all of a clinic's patients.",
        "responses": {
          "200": {
            "description": "returns vaild json for v2",
            "content": {
              "application/json": {
                "example": {
                  "patients": [
                    {
                      "id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                      "first_name": "Example",
                      "last_name": "Patient",
                      "email": "patient@example.com",
                      "archived": false
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "patients": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Patient"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Patients"
        ],
        "summary": "Create a patient",
        "description": "Creates a new patient",
        "parameters": [

        ],
        "responses": {
          "201": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "patient": {
                    "id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                    "first_name": "Example",
                    "last_name": "Patient",
                    "email": "example_patient@fullscript.com",
                    "archived": false,
                    "date_of_birth": "1977-01-12",
                    "gender": "female",
                    "discount": 10,
                    "total_discount": 10,
                    "mobile_number": "+12223334444",
                    "text_message_notification": true,
                    "metadata": {
                      "id": "9999-9999-9999"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "patient": {
                      "$ref": "#/components/schemas/Patient"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Unique Email for the Patient"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Patient's first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Patient's last name"
                  },
                  "date_of_birth": {
                    "type": "string",
                    "description": "Patient's date of birth in the format `yyyy-mm-dd`"
                  },
                  "gender": {
                    "type": "string",
                    "description": "Gender of the patient. Valid options are 'male', 'female', or 'x'."
                  },
                  "mobile_number": {
                    "type": "string",
                    "description": "Patient's mobile number in the format `+12223334444`"
                  },
                  "send_welcome_email": {
                    "type": "string",
                    "description": "Sends a welcome email to the patient upon successful creation. Defaults to true."
                  },
                  "discount": {
                    "type": "string",
                    "description": "Patient discount level (in percentage). This discount does not include the clinic discount. Defaults to 0."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Your system's unique patient identifier.",
                        "type": "string"
                      }
                    },
                    "description": "Metadata to be attached to the patient."
                  }
                },
                "required": [
                  "email",
                  "first_name",
                  "last_name"
                ]
              }
            }
          }
        }
      }
    },
    "/api/clinic/patients/{id}": {
      "get": {
        "tags": [
          "Patients"
        ],
        "summary": "Retrieve a patient",
        "description": "Retrieves an existing patient. You need to supply the unique ID for the patient.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Patient",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "patient": {
                    "id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                    "first_name": "Example",
                    "last_name": "Patient",
                    "email": "patient@example.com",
                    "archived": false,
                    "date_of_birth": null,
                    "gender": "female",
                    "discount": 0,
                    "total_discount": 0,
                    "mobile_number": null,
                    "text_message_notification": true,
                    "metadata": {
                      "id": "9999-9999-9999"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "patient": {
                      "$ref": "#/components/schemas/Patient"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Patients"
        ],
        "summary": "Update a patient",
        "description": "Updates a specific patient with the attributes that you pass in. Parameters not provided will remain unchanged.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Patient",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json response for v2",
            "content": {
              "application/json": {
                "example": {
                  "patient": {
                    "id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                    "first_name": "Ben",
                    "last_name": "Peters",
                    "email": "patient@example.com",
                    "archived": false,
                    "date_of_birth": null,
                    "gender": "female",
                    "discount": 0,
                    "total_discount": 0,
                    "mobile_number": null,
                    "text_message_notification": true,
                    "metadata": {
                      "id": "9999-9999-9999"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "patient": {
                      "$ref": "#/components/schemas/Patient"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Unique Email for the Patient"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Patient's first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Patient's last name"
                  },
                  "date_of_birth": {
                    "type": "string",
                    "description": "Patient's date of birth in the format `yyyy-mm-dd`"
                  },
                  "gender": {
                    "type": "string",
                    "description": "Gender of the patient. Valid options are 'male', 'female', or 'x'."
                  },
                  "mobile_number": {
                    "type": "string",
                    "description": "Patient's mobile number in the format `+12223334444`"
                  },
                  "discount": {
                    "type": "string",
                    "description": "Patient discount level (in percentage). This discount does not include the clinic discount. Defaults to 0."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Your system's unique patient identifier.",
                        "type": "string"
                      }
                    },
                    "description": "Metadata to be attached to the patient."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/practitioners": {
      "get": {
        "tags": [
          "Practitioners"
        ],
        "summary": "List all practitioners",
        "description": "This resource allows you to list all of a clinic's practitioners.",
        "responses": {
          "200": {
            "description": "returns the correct json for base v2",
            "content": {
              "application/json": {
                "example": {
                  "practitioners": [
                    {
                      "id": "8xx00x67-9684-4679-8x79-xx5fxx12327x",
                      "first_name": "Doctor",
                      "last_name": "Example",
                      "email": "the_doctor@example.com",
                      "practitioner_type_id": "xx55x681-5340-425x-x212-4954xxx92x7x",
                      "metadata": {
                        "id": "9999-9999-9999"
                      }
                    },
                    {
                      "id": "x1x0196x-5615-4874-xxx4-48x459180x09",
                      "first_name": "Example",
                      "last_name": "Practitioner",
                      "email": "practitioner@example.com",
                      "practitioner_type_id": "xx55x681-5340-425x-x212-4954xxx92x7x",
                      "metadata": {
                        "id": null
                      }
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 2
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "practitioners": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Practitioner"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Practitioners"
        ],
        "summary": "Create a practitioner",
        "description": "Creates a new practitioner",
        "parameters": [

        ],
        "responses": {
          "201": {
            "description": "returns the correct json for base v2",
            "content": {
              "application/json": {
                "example": {
                  "practitioner": {
                    "id": "xx9598xx-x765-xxxx-81x8-847050x15x85",
                    "first_name": "Another",
                    "last_name": "Doctor",
                    "email": "another_doctor@example.com",
                    "practitioner_type_id": "xx55x681-5340-425x-x212-4954xxx92x7x",
                    "metadata": {
                      "id": "123"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "practitioner": {
                      "$ref": "#/components/schemas/Practitioner"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "practitioner_type_id": {
                    "type": "string",
                    "description": "Unique Identifier for the Practitioner's Type"
                  },
                  "email": {
                    "type": "string",
                    "description": "Unique Email for the Practitioner"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Practitioner's first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Practitioner's last name"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Your system's unique practitioner identifier.",
                        "type": "string"
                      }
                    },
                    "description": "Metadata to be attached to the practitioner."
                  }
                },
                "required": [
                  "practitioner_type_id",
                  "email",
                  "first_name",
                  "last_name"
                ]
              }
            }
          }
        }
      }
    },
    "/api/clinic/practitioners/{id}": {
      "get": {
        "tags": [
          "Practitioners"
        ],
        "summary": "Retrieve a practitioner",
        "description": "Retrieves an existing practitioner. You need to supply the unique ID for the practitioner.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Practitioner",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns the correct json for base v2",
            "content": {
              "application/json": {
                "example": {
                  "practitioner": {
                    "id": "8xx00x67-9684-4679-8x79-xx5fxx12327x",
                    "first_name": "Doctor",
                    "last_name": "Example",
                    "email": "the_doctor@example.com",
                    "practitioner_type_id": "xx55x681-5340-425x-x212-4954xxx92x7x",
                    "metadata": {
                      "id": "9999-9999-9999"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "practitioner": {
                      "$ref": "#/components/schemas/Practitioner"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Practitioners"
        ],
        "summary": "Update a practitioner",
        "description": "Updates a specific practitioner with the attributes that you pass in. Parameters not provided will remain unchanged.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique Identifier for the Practitioner",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns the correct json for base v2",
            "content": {
              "application/json": {
                "example": {
                  "practitioner": {
                    "id": "8xx00x67-9684-4679-8x79-xx5fxx12327x",
                    "first_name": "Doctor",
                    "last_name": "Smith",
                    "email": "dr_smith99@example.com",
                    "practitioner_type_id": "xx55x681-5340-425x-x212-4954xxx92x7x",
                    "metadata": {
                      "id": "123"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "practitioner": {
                      "$ref": "#/components/schemas/Practitioner"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Unique Email for the Practitioner"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Practitioner's first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Practitioner's last name"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Your system's unique practitioner identifier.",
                        "type": "string"
                      }
                    },
                    "description": "Metadata to be attached to the practitioner."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/practitioners/{practitioner_id}/protocols": {
      "get": {
        "tags": [
          "Protocols"
        ],
        "summary": "List all practitioner protocols",
        "description": "The practitioner protocol object contains a record of all treatment plan protocols that belong to a practitioner.",
        "parameters": [
          {
            "name": "practitioner_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Practitioner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "current_state",
            "in": "query",
            "required": false,
            "description": "Takes an argument of `active`, `draft` or `cancelled` to return `active`, `draft` or `cancelled` protocols.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Accepts one of the following arguments: `name` or `current_state`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Ordering defaults to `ASC` and can take an argument of `ASC` or `DESC`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownership_type",
            "in": "query",
            "required": false,
            "description": "Takes an argument of `owned`, `shared` or `all` to return only protocols created by the practitioner, only protocols shared with the practitioner, or both protocols created by and shared with the practitioner, respectively. If this argument is not included, only protocols created by the practitioner are returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "protocols": [
                    {
                      "id": "2x28xx67-x5xx-408x-8820-x5x00x617148",
                      "name": "Cold and Flu Season",
                      "current_state": "active",
                      "ownership_type": "owned"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocols": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Protocol"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/practitioners/{practitioner_id}/templates": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "List all practitioner templates",
        "description": "The practitioner template object contains a record of all treatment plan templates that belong to a practitioner.",
        "parameters": [
          {
            "name": "practitioner_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Practitioner",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "templates": [
                    {
                      "id": "2x28xx67-x5xx-408x-8820-x5x00x617148",
                      "name": "Cold and Flu Season",
                      "current_state": "active"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "templates": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Template"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/protocols/{id}": {
      "get": {
        "tags": [
          "Protocols"
        ],
        "summary": "Retrieve a protocol",
        "description": "Retrieves an existing protocol.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the protocol.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid protocol json for v2",
            "content": {
              "application/json": {
                "example": {
                  "protocol": {
                    "id": "2x28xx67-x5xx-408x-8820-x5x00x617148",
                    "name": "Cold and Flu Season",
                    "current_state": "active",
                    "practitioner": {
                      "id": "8xx00x67-9684-4679-8x79-xx5fxx12327x"
                    },
                    "personal_message": "Take with a meal. Not on an empty stomach.",
                    "recommendations": [
                      {
                        "variant_id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                        "refill": false,
                        "dosage_amount": "4",
                        "dosage_frequency": "three times per day",
                        "dosage_duration": null,
                        "dosage_permutations": "with food",
                        "dosage_format": "capsule",
                        "quantity_recommended": 1
                      }
                    ]
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol": {
                      "$ref": "#/components/schemas/Protocol"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/search/patients": {
      "get": {
        "tags": [
          "Patients"
        ],
        "summary": "Search for patients",
        "description": "This resource allows you to search for patients by `first_name`, `last_name`, or by `email`.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "description": "Search for patients matching a query string.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "patients": [
                    {
                      "id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                      "first_name": "Example",
                      "last_name": "Patient",
                      "email": "patient@example.com",
                      "archived": false
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "patients": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Patient"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/staff": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "List all staff",
        "description": "This resource allows you to list all of a clinic's staff.",
        "responses": {
          "200": {
            "description": "returns valid json when scoped",
            "content": {
              "application/json": {
                "example": {
                  "staff": [
                    {
                      "id": "xxx00xx-000-xxxx-xxx1-xxx111x0x0x",
                      "first_name": "Example",
                      "last_name": "Staff",
                      "email": "staff@example.com",
                      "metadata": {
                        "id": "9999-9999-9999"
                      }
                    },
                    {
                      "id": "xxx11xx-111-xxxx-xxx0-xxx000x1x1x",
                      "first_name": "Other",
                      "last_name": "Staff",
                      "email": "other.staff@example.com",
                      "metadata": {
                        "id": null
                      }
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 2
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "staff": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Staff"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Staff"
        ],
        "summary": "Create a staff member",
        "description": "Creates a new staff member",
        "parameters": [

        ],
        "responses": {
          "201": {
            "description": "returns valid json",
            "content": {
              "application/json": {
                "example": {
                  "staff": {
                    "id": "aa5f7f2b-e779-49c0-ba7e-2f4356448020",
                    "first_name": "Example",
                    "last_name": "Staff",
                    "email": "example_staff@example.com",
                    "metadata": {
                      "id": "1234"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "staff": {
                      "$ref": "#/components/schemas/Staff"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Unique Email for the staff member"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Staff member's first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Staff member's last name"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Your system's unique staff identifier.",
                        "type": "string"
                      }
                    },
                    "description": "Metadata to be attached to the staff member."
                  }
                },
                "required": [
                  "email",
                  "first_name",
                  "last_name"
                ]
              }
            }
          }
        }
      }
    },
    "/api/clinic/staff/{id}": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Retrieve a staff member",
        "description": "Retrieves an existing staff member. You need to supply the unique ID for the staff member.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the staff member",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json",
            "content": {
              "application/json": {
                "example": {
                  "staff": {
                    "id": "xxx00xx-000-xxxx-xxx1-xxx111x0x0x",
                    "first_name": "Example",
                    "last_name": "Staff",
                    "email": "staff@example.com",
                    "metadata": {
                      "id": "9999-9999-9999"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "staff": {
                      "$ref": "#/components/schemas/Staff"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Staff"
        ],
        "summary": "Update a staff member",
        "description": "Updates a specific staff member with the attributes that you pass in. Parameters not provided will remain unchanged.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique Identifier for the staff member",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns the correct json",
            "content": {
              "application/json": {
                "example": {
                  "staff": {
                    "id": "xxx00xx-000-xxxx-xxx1-xxx111x0x0x",
                    "first_name": "Updated",
                    "last_name": "Name",
                    "email": "updatedemail@example.com",
                    "metadata": {
                      "id": "1234"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "staff": {
                      "$ref": "#/components/schemas/Staff"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Unique Email for the staff member"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Staff member's first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Staff member's last name"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Your system's unique staff identifier.",
                        "type": "string"
                      }
                    },
                    "description": "Metadata to be attached to the staff member."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/templates/{id}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Retrieve a template",
        "description": "Retrieves an existing template.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the Template.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for v2",
            "content": {
              "application/json": {
                "example": {
                  "template": {
                    "id": "2x28xx67-x5xx-408x-8820-x5x00x617148",
                    "name": "Cold and Flu Season",
                    "current_state": "active",
                    "practitioner_id": "8xx00x67-9684-4679-8x79-xx5fxx12327x",
                    "personal_message": "Take with a meal. Not on an empty stomach.",
                    "recommendations": [
                      {
                        "variant_id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                        "refill": false,
                        "dosage_amount": "4",
                        "dosage_frequency": "three times per day",
                        "dosage_duration": null,
                        "dosage_permutations": "with food",
                        "dosage_format": "capsule",
                        "quantity_recommended": 1
                      }
                    ]
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "template": {
                      "$ref": "#/components/schemas/Template"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clinic/treatment_plans/{id}": {
      "get": {
        "tags": [
          "Treatment Plans"
        ],
        "summary": "Retrieve a treatment plan",
        "description": "Retrieves an existing treatment plan. You need to supply the unique ID for the treatment plan.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Treatment Plan",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for patch '2020-02-14'",
            "content": {
              "application/json": {
                "example": {
                  "treatment_plan": {
                    "id": "xx45x0xx-x840-41xx-9922-98xx6001507x",
                    "state": "active",
                    "patient": {
                      "id": "x1x0196x-5615-4874-xxe4-48x459180x09"
                    },
                    "practitioner": {
                      "id": "x1x0196x-5615-4874-xxx4-48x459180x09"
                    },
                    "available_at": "2018-03-02",
                    "created_at": "2020-01-01T05:00:00.000Z",
                    "updated_at": "2020-01-01T05:00:00.000Z",
                    "invitation_url": "http://localhost:3000/welcome/test-store-897/1bad61b94d",
                    "recommendations": [
                      {
                        "variant_id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                        "refill": false,
                        "units_to_purchase": 10,
                        "dosage": {
                          "amount": "1-2",
                          "frequency": "once per day",
                          "duration": null,
                          "format": "capsule",
                          "additional_info": "with food"
                        }
                      }
                    ],
                    "personal_message": null,
                    "metadata": {
                      "id": "9999-9999-9999"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "treatment_plan": {
                      "$ref": "#/components/schemas/TreatmentPlan"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Treatment Plans"
        ],
        "summary": "Update a treatment plan",
        "description": "Updates a Treatment Plan for a patient.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Treatment plan.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json for patch \"2020-02-14\"",
            "content": {
              "application/json": {
                "example": {
                  "treatment_plan": {
                    "id": "xx45x0xx-x840-41xx-9922-98xx6001507x",
                    "state": "active",
                    "patient": {
                      "id": "x1x0196x-5615-4874-xxe4-48x459180x09"
                    },
                    "practitioner": {
                      "id": "x1x0196x-5615-4874-xxx4-48x459180x09"
                    },
                    "available_at": "2018-03-02",
                    "created_at": "2020-01-01T05:00:00.000Z",
                    "updated_at": "2020-01-01T05:00:00.000Z",
                    "invitation_url": "http://localhost:3000/welcome/test-store-959/cd0adf16e2",
                    "recommendations": [
                      {
                        "variant_id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                        "refill": false,
                        "units_to_purchase": 1,
                        "dosage": {
                          "amount": "1-2",
                          "frequency": "once per day",
                          "duration": "as needed",
                          "format": "capsule",
                          "additional_info": "with food"
                        }
                      }
                    ],
                    "personal_message": "Take with a meal. Not on an empty stomach.",
                    "metadata": {
                      "id": "9999-9999-9999"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "treatment_plan": {
                      "$ref": "#/components/schemas/TreatmentPlan"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "personal_message": {
                    "type": "string",
                    "description": "A personal message that a practitioner can attach to the treatment plan."
                  },
                  "recommendations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "variant_id": {
                          "description": "Unique ID for the Variant.",
                          "type": "string"
                        },
                        "units_to_purchase": {
                          "description": "Quantity (number of units) of variant to recommend.",
                          "type": "string"
                        },
                        "refill": {
                          "description": "Send refill reminders?",
                          "type": "string"
                        },
                        "dosage": {
                          "description": "Dosage information for the for the recommednation.",
                          "type": "object",
                          "properties": {
                            "amount": {
                              "description": "The dose to take. Expects numbers but can include a range or a fraction (e.g. `1`, or `1-2`, or `1/2` are all valid).",
                              "type": "string"
                            },
                            "frequency": {
                              "description": "The frequency with which to take the dose. This can be any of the following strings: `once per day`, `twice per day`, `three times per day`, `four times per day`, `every morning`, or `every night`.",
                              "type": "string"
                            },
                            "duration": {
                              "description": "The period for which to take the dose. This can be the number of days (e.g. `120` for `4 months`) or it can be any of the following strings: `as needed`, `until symptoms resolve`, or `ongoing`.",
                              "type": "string"
                            },
                            "additional_info": {
                              "description": "Extra instructions for taking dose (e.g. With meals).",
                              "type": "string"
                            },
                            "format": {
                              "description": "Format of the recommended dose. This can be any of the following strings: `capsule`, `chewable`, `gel`, `liquid`, `lozenge`, `packet`, `pellet`, `drops`, `powder`, `strip`, `suppository`, or `tablet`.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "required": [
                        "variant_id",
                        "units_to_purchase"
                      ]
                    },
                    "description": "Rx plan for a product."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Your system's unique treatment_plan identifier.",
                        "type": "string"
                      }
                    },
                    "description": "Metadata to be attached to the treatment_plan."
                  }
                },
                "required": [
                  "recommendations"
                ]
              }
            }
          }
        }
      }
    },
    "/api/clinic/treatment_plans/{treatment_plan_id}/in_office_checkout": {
      "post": {
        "tags": [
          "Treatment Plans"
        ],
        "summary": "Create an in-office checkout",
        "description": "The `in_office_checkout` object takes a `treatment_plan`. It uses the patient from the `treatment_plan` to:\n\na) clear out anything in the patient's cart.\n\nb) populate the patient's cart with the treatment plan.\n\nc) return a url on Fullscript so that a practitioner can fullfill an in-office checkout.\n",
        "parameters": [
          {
            "name": "treatment_plan_id",
            "in": "path",
            "required": true,
            "description": "Unique ID for the Treatment Plan",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "should check segmentation and populate a patient cart with variants from the treatment plan",
            "content": {
              "application/json": {
                "example": {
                  "in_office_checkout": {
                    "url": "https://localhost:3000/o/patients/121219232/checkout"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "in_office_checkout": {
                      "$ref": "#/components/schemas/InOfficeCheckout"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/clinic_keys": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List All ClinicKey Events",
        "description": "This endpoint lists all `clinic_key` events from the last 30 days.\n\n* A `clinic_key.revoked` event happens when a clinic revokes access to your integration.\n\n* A `clinic_key.activated` event happens when the first request is made through the API with a valid `X-FS-Clinic-Key`—activating the integration.\n",
        "parameters": [
          {
            "name": "created_at",
            "in": "query",
            "required": false,
            "description": "Filter by `created_at` date. The date must be formatted as follows `yyyy-mm-dd`. \n - less than: Return events where the `created_at` date is less than. `<yyyy-mm-dd`.\n - greater than: Return events where the `created_at` date is greater than. `>yyyy-mm-dd`.\n - within a range: Return events where the `created_at` date is within a range. `yyyy-mm-dd..yyyy-mm-dd`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "description": "Filter events by `event_type`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Accepts one of the following arguments: `event_type` `created_at`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Ordering defaults to `ASC` and can take an argument of `ASC` or `DESC`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json",
            "content": {
              "application/json": {
                "example": {
                  "events": [
                    {
                      "id": "55805e0f-4f45-4d0d-bee4-435bc3e98d81",
                      "type": "clinic_key.activated",
                      "created_at": "2021-12-11T05:00:00.000Z",
                      "clinic_id": "xx7x357x-9x36-xxxx-x553-7x3xx398xxx"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve an Event",
        "description": "This endpoint retrieves details from an Event. Note that event's can only be retrieved if they were made within the last 30 days.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the Event",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json",
            "content": {
              "application/json": {
                "example": {
                  "event": {
                    "id": "5f112803-e0d4-48ac-a931-7e412ad6693a",
                    "type": "treatment_plan.created",
                    "created_at": "2021-12-12T05:00:00.000Z",
                    "clinic_id": "xx7x357x-9x36-xxxx-x553-7x3xx398xxx",
                    "data": {
                      "treatment_plan": {
                        "id": "xx45x0xx-x840-41xx-9922-98xx6001507x",
                        "state": "active",
                        "patient": {
                          "id": "x1x0196x-5615-4874-xxe4-48x459180x09"
                        },
                        "practitioner": {
                          "id": "x1x0196x-5615-4874-xxx4-48x459180x09"
                        },
                        "available_at": "2018-03-02T05:00:00.000Z",
                        "recommendations": [
                          {
                            "variant_id": "xx2688x2-4303-4278-xx73-x7083x6146x1",
                            "refill": false,
                            "units_to_purchase": 10,
                            "dosage": {
                              "recommended_amount": "1-2",
                              "recommended_frequency": "once per day",
                              "recommended_duration": null,
                              "format": "capsule",
                              "additional_info": "with food"
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "$ref": "#/components/schemas/Event"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/orders": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List All Order Events",
        "description": "This endpoint lists all `order` events from the last 30 days.\n\n* An `order.placed` event happens when an order has been placed.\n",
        "parameters": [
          {
            "name": "created_at",
            "in": "query",
            "required": false,
            "description": "Filter by `created_at` date. The date must be formatted as follows `yyyy-mm-dd`. \n - less than: Return events where the `created_at` date is less than. `<yyyy-mm-dd`.\n - greater than: Return events where the `created_at` date is greater than. `>yyyy-mm-dd`.\n - within a range: Return events where the `created_at` date is within a range. `yyyy-mm-dd..yyyy-mm-dd`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "description": "Filter events by `event_type`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Accepts one of the following arguments: `event_type` `created_at`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Ordering defaults to `ASC` and can take an argument of `ASC` or `DESC`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "should return order events when scoped",
            "content": {
              "application/json": {
                "example": {
                  "events": [
                    {
                      "id": "4da7d8bf-6b79-4039-82f6-6a73cfb7f7ac",
                      "type": "order.placed",
                      "created_at": "2021-12-14T19:36:58.000Z",
                      "clinic_id": "xx7x357x-9x36-xxxx-x553-7x3xx398xxx"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/patients": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List All Patient Events",
        "description": "This endpoint lists all `patient` events from the last 30 days.\n\n* A `patient.created` event happens when a patient is created.\n\n* A `patient.updated` event happens when a patient is updated.\n",
        "parameters": [
          {
            "name": "created_at",
            "in": "query",
            "required": false,
            "description": "Filter by `created_at` date. The date must be formatted as follows `yyyy-mm-dd`. \n - less than: Return events where the `created_at` date is less than. `<yyyy-mm-dd`.\n - greater than: Return events where the `created_at` date is greater than. `>yyyy-mm-dd`.\n - within a range: Return events where the `created_at` date is within a range. `yyyy-mm-dd..yyyy-mm-dd`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "description": "Filter events by `event_type`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Accepts one of the following arguments: `event_type` `created_at`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Ordering defaults to `ASC` and can take an argument of `ASC` or `DESC`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json",
            "content": {
              "application/json": {
                "example": {
                  "events": [
                    {
                      "id": "c1a9fe69-939d-4134-9c3b-b9925e13f526",
                      "type": "patient.created",
                      "created_at": "2021-12-12T05:00:00.000Z",
                      "clinic_id": "xx7x357x-9x36-xxxx-x553-7x3xx398xxx"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/products": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List All Product Events",
        "description": "This endpoint lists all `product` events from the last 30 days.\n\n* A `product.created` event happens when a product is created.\n\n* A `product.updated` event happens when a product or one of its variants is updated.\n\n* A `product.description.updated` event happens when a product's description is updated.\n",
        "parameters": [
          {
            "name": "created_at",
            "in": "query",
            "required": false,
            "description": "Filter by `created_at` date. The date must be formatted as follows `yyyy-mm-dd`. \n - less than: Return events where the `created_at` date is less than. `<yyyy-mm-dd`.\n - greater than: Return events where the `created_at` date is greater than. `>yyyy-mm-dd`.\n - within a range: Return events where the `created_at` date is within a range. `yyyy-mm-dd..yyyy-mm-dd`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "description": "Filter events by `event_type`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Accepts one of the following arguments: `event_type` `created_at`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Ordering defaults to `ASC` and can take an argument of `ASC` or `DESC`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json",
            "content": {
              "application/json": {
                "example": {
                  "events": [
                    {
                      "id": "81b52258-46c8-4499-ac92-b979b9ecdd48",
                      "type": "product.created",
                      "created_at": "2021-12-12T05:00:00.000Z"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/events/treatment_plans": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "List All TreatmentPlan Events",
        "description": "This endpoint lists all `treatment_plan` events from the last 30 days.\n\n* A `treatment_plan.created` event happens when a Treatment Plan is created.\n\n* A `treatmen_plan.updated` event happens when a Treatment Plan is updated.\n\n* A `treatmen_plan.recommendation.updated` event happens when a Treatment Plan's recommendation is updated.\n",
        "parameters": [
          {
            "name": "created_at",
            "in": "query",
            "required": false,
            "description": "Filter by `created_at` date. The date must be formatted as follows `yyyy-mm-dd`. \n - less than: Return events where the `created_at` date is less than. `<yyyy-mm-dd`.\n - greater than: Return events where the `created_at` date is greater than. `>yyyy-mm-dd`.\n - within a range: Return events where the `created_at` date is within a range. `yyyy-mm-dd..yyyy-mm-dd`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_type",
            "in": "query",
            "required": false,
            "description": "Filter events by `event_type`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Accepts one of the following arguments: `event_type` `created_at`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Ordering defaults to `ASC` and can take an argument of `ASC` or `DESC`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json",
            "content": {
              "application/json": {
                "example": {
                  "events": [
                    {
                      "id": "c62f6423-f2c5-4806-b462-14ad826115bb",
                      "type": "treatment_plan.recommendation.updated",
                      "created_at": "2021-12-12T05:00:00.000Z",
                      "clinic_id": "xx7x357x-9x36-xxxx-x553-7x3xx398xxx"
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/oauth/revoke": {
      "post": {
        "tags": null,
        "summary": "Revoke an OAuth Token",
        "description": "Revokes a user’s OAuth token (and associated refresh token). This user will need to authorize your app again before you can access Fullscript APIs and data on their behalf. \n\n  <table>\n    <tr style=\"border:none;\">\n      <td style=\"background-color:#E6F0DF;\"><b>Tip: </b>You can revoke an expired access token, no need to refresh it first.</td>\n    </tr>\n  </table>\n",
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "should revoke a token",
            "content": {
              "application/json": {
                "example": {
                },
                "schema": {
                  "type": "object",
                  "properties": {
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "description": "The App’s client ID, a unique value found in the details section for this App in the [Fullscript API Dashboard](https://api-dashboard.fullscript.io/)."
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The App’s secret token, found in the [Fullscript API Dashboard](https://api-dashboard.fullscript.io/) details for this App."
                  },
                  "token": {
                    "type": "string",
                    "description": "The OAuth access token to be revoked (it can be an expired token)."
                  }
                },
                "required": [
                  "client_id",
                  "client_secret",
                  "token"
                ]
              }
            }
          }
        }
      }
    },
    "/api/oauth/token": {
      "post": {
        "tags": null,
        "summary": "Create an OAuth Token",
        "description": "\nCreates a new role-based OAuth token (from the user’s authorization code) or refreshes an expired token.\n\n  <table>\n    <tr style=\"border:none;\">\n      <td style=\"background-color:#EAE7EC;\"><b>Note:</b> Applications created before August 26, 2021 use OAuth 2.0 with <b>clinic</b> level authorization instead of role-based access control. In that case, the OAuth authorization code, access token, and refresh token are on behalf of a clinic or store, not a user, and the resource owner type is `Clinic` in the response.</br></br>To take advantage of everything role-based access control offers, contact your account manager for our migration guide.</td>\n    </tr>\n  </table>\n",
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "should return a token when given a valid access grant",
            "content": {
              "application/json": {
                "example": {
                  "oauth": {
                    "access_token": "R8gB9ZAZWjDxHi8pgoJi2zmkp26uDzSlF5UqvEiILXc",
                    "token_type": "Bearer",
                    "expires_in": 7200,
                    "refresh_token": "lCZf9_PN1bYVnn4cpQ_b7y8cHd1EiLFP48eJJCjsUO4",
                    "scope": "catalog:read",
                    "created_at": "2018-10-16T04:00:00.000Z",
                    "resource_owner": {
                      "id": "xx7x357x-9x36-xxxx-x553-7x3xx398xxx",
                      "type": "Clinic"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "oauth": {
                      "$ref": "#/components/schemas/Oauth"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "description": "The App’s client ID, a unique value found in the details section for this App in the [Fullscript API Dashboard](https://api-dashboard.fullscript.io/)."
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The App’s secret token, found in the [Fullscript API Dashboard](https://api-dashboard.fullscript.io/) details for this App."
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Must match the **Redirect URI** value configured for this App in the [Fullscript API Dashboard](https://api-dashboard.fullscript.io/)."
                  },
                  "grant_type": {
                    "type": "string",
                    "description": "The type of OAuth grant you are requesting. Use `authorization_code` if you're getting the token for the first time. Use `refresh_token` to refresh a stale token."
                  },
                  "code": {
                    "type": "string",
                    "description": "The Fullscript user’s temporary authorization code obtained from the `authorize` endpoint. This one-time use code is exchanged for an OAuth access token. (This parameter is required when using the `authorization_code` `grant_type`, but not if refreshing the token.)"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "The refresh token that was returned with this user’s access token.  Include this in the request when your  access token is expired and you’re requesting a fresh one. (This parameter is required when using the `refresh_token` `grant_type`, but not when requesting an OAuth token from the auth code.)"
                  }
                },
                "required": [
                  "client_id",
                  "client_secret",
                  "redirect_uri",
                  "grant_type",
                  "code",
                  "refresh_token"
                ]
              }
            }
          }
        }
      }
    },
    "/api/webhooks/deliveries": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List All Webhook Deliveries",
        "description": "This endpoint lists all `webhook_deliveries` from the last 30 days.\n",
        "parameters": [
          {
            "name": "attempted_at",
            "in": "query",
            "required": false,
            "description": "Filter by `attempted_at` date. The date must be formatted as follows `yyyy-mm-dd`. \n - less than: Return webhook deliveries where the `attempted_at` date is less than. `<yyyy-mm-dd`.\n - greater than: Return webhook deliveries where the `attempted_at` date is greater than. `>yyyy-mm-dd`.\n - within a range: Return webhook deliveries where the `attempted_at` date is within a range. `yyyy-mm-dd..yyyy-mm-dd`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_id",
            "in": "query",
            "required": false,
            "description": "Filter webhook deliveries by `event_id`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "successfully_delivered",
            "in": "query",
            "required": false,
            "description": "Filter webhook deliveries by whether they have been successfully delivered or not. Accepts a string of `true` or `false`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "description": "Accepts one of the following arguments: `event_id` `attempted_at`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "description": "Ordering defaults to `ASC` and can take an argument of `ASC` or `DESC`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns valid json",
            "content": {
              "application/json": {
                "example": {
                  "webhook_deliveries": [
                    {
                      "id": "3x0x2147-6x82-49xx-9x59-621xx87x40x2",
                      "attempt_number": 1,
                      "attempted_at": "2018-10-16T04:01:00.000Z",
                      "previous_attempt_at": null,
                      "next_attempt_at": null,
                      "successfully_delivered": false,
                      "response_body": "{\"challenge\"=>\"my-secret-challenge-token\"}",
                      "response_header": "{\"Content-type\"=>\"application/json\"}",
                      "response_status": 200,
                      "response_ip_address": "127.0.0.1",
                      "response_errors": null,
                      "event_payload": {
                        "event": {
                          "id": "x5xxxxx8-92x7-4xxx-9x0x-345x404x94x1",
                          "type": "patient.updated",
                          "created_at": "2018-10-16T04:00:00.000Z",
                          "clinic_id": "xx7x357x-9x36-xxxx-x553-7x3xx398xxx",
                          "data": {
                            "patient": {
                              "id": "x1x0196x-5615-4874-xxe4-48x459180x09",
                              "first_name": "Example",
                              "last_name": "Patient",
                              "email": "patient@example.com",
                              "date_of_birth": null,
                              "gender": null,
                              "discount": 0,
                              "total_discount": 0,
                              "mobile_number": null,
                              "text_message_notification": true
                            }
                          },
                          "integration_id": "x1x27xxx-x9x9-49x6-xx62-107x7x051874"
                        }
                      }
                    }
                  ],
                  "meta": {
                    "current_page": 1,
                    "next_page": null,
                    "prev_page": null,
                    "total_pages": 1,
                    "total_count": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhook_deliveries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WebhookDelivery"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Metadata",
      "description": "Metadata allows you to update specific objects in Fullscript with an ID of your choosing. Currently we support updating Patient, Practitioner, Staff, and TreatmentPlan objects with metadata.\n\nMetadata is useful for storing identifiers from your system into Fullscript — making it easier to link up users from your system into ours. For example, you could use  metadata to attach your system's user ID to a Practitioner or Patient. Then using the metadata endpoint you can retrieve that same object using the ID's from your system."
    },
    {
      "name": "Pagination"
    },
    {
      "name": "Request IDs"
    },
    {
      "name": "Clinic",
      "description": "This endpoints retrieves information about the clinic provided from the <code>X-FS-Clinic-Key</code>."
    },
    {
      "name": "Staff",
      "description": "The `staff` object contains a record of all available staff members that belong to a clinic. The API allows you to create and update staff members. It also allows you to list all staff and find individual staff members."
    },
    {
      "name": "Practitioners",
      "description": "The `practitioner` object contains a record of all available practitioners that belong to a clinic. The API allows you to create and update practitioners. It also allows you to list all practitioners and find individual practitioners."
    },
    {
      "name": "Practitioner Types",
      "description": "The `practitioner type` object contains details for all the practitioner types available. The API allows you to list all practitioner types."
    },
    {
      "name": "Protocols",
      "description": "The `protocol` object contains a record of all treatment plan protocols made by and/or shared with a practitioner. Protocols use a treatment plan as a template that can be re-used when writing prescriptions. Protocols were previously known as templates."
    },
    {
      "name": "Templates",
      "description": "The `template` object contains a record of all treatment plan templates made by a practitioner. Templates use a treatment plan as a template that can be re-used when writing prescriptions. Templates are soon being deprecated and replaced with protocols."
    },
    {
      "name": "Patients",
      "description": "The `patient` object contains a record of all available patients that belong to a clinic.\nThe API allows you to create and update patients. It also allows you to list all patients and find individual patients."
    },
    {
      "name": "Address",
      "description": "The `address` object contains a record of all addresses that a patient has made.\nIn this API you can look up the address on an individual patient."
    },
    {
      "name": "Orders",
      "description": "The `order` object contains a record of all completed or refunded orders that a patient has made."
    },
    {
      "name": "Treatment Plans",
      "description": "The `treatment plan` object is the way for practitioners create prescriptions in Fullscript. The API allows you to create treatment plans. It also allows you to list all treatment plans that belong to a patient and find individual treatment plans."
    },
    {
      "name": "Products",
      "description": "The `product` object contains details for all products on the Fullscript platform. The API allows you to list all products and find individual products."
    },
    {
      "name": "Categories",
      "description": "The `category` object contains a record of all categories from a clinic."
    },
    {
      "name": "Product search"
    },
    {
      "name": "Allergens",
      "description": " Attributes about a product as they relate specifically to ingredients known to cause allergic reactions / ingredients known to want to be avoided (e.g. 'Peanut free'). They are not attested by third parties. <br /> <br /> The `allergen` object contains details for all allergens listed on the Fullscript platform. The API allows you to list all allergens and find individual allergens. "
    },
    {
      "name": "Brands",
      "description": "The `brand` object contains details for all brands on the Fullscript platform.\nThe API allows you to list all brands and find individual brands."
    },
    {
      "name": "Ingredients",
      "description": " Supplement ingredients that make up the product (e.g. 'Curcumin'). <br /> <br /> The `ingredient` object contains details for all ingredients listed on the Fullscript platform.\nThe API allows you to list all ingredients and find individual ingredients."
    },
    {
      "name": "Supplement Types",
      "description": " Groups of products based on similar attributes (e.g. 'Multivitamins'). <br /> <br /> The `supplement type` object contains details for all supplement types listed on the Fullscript platform.\nThe API allows you to list all supplement types and find individual supplement types."
    },
    {
      "name": "Third Party Certifications",
      "description": " Third party certifications are product level filters that are assessed by a party external to the manufacturer (e.g. 'Certified Halal'). <br /> <br /> The `third party certification` object contains details for all third party certifications listed on the Fullscript platform.\nThe API allows you to list all third party certifications and find individual third party certifications."
    },
    {
      "name": "Variants",
      "description": "The `variant` object contains details about product variants. The API allows you to find individual variants."
    },
    {
      "name": "Dynamic link"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks allow your application to stay informed with what’s happening on Fullscript. You can subscribe to events and be notified when they happen. Let’s say one of your clinics updates a patient or creates a treatment plan; webhooks allow you to know about those events and take action if needed.\n\n### Using webhooks\nYou can register a single webhook URL through the [API Dashboard App](https://api-dashboard.fullscript.io) and subscribe to multiple event types.\n\nWhen the event occurs—say a treatment plan is created, a patient is updated, or a clinic key is revoked, etc.—Fullscript creates an `Event`. This `Event` contains all the relevant information about what just happened. It includes the event's type (ex: `treatment_plan.created`) and any relevant data to that event.\n\nOnce the event is created, Fullscript will send out a payload with the event data via an HTTP POST request to the webhook url that you defined in your account. Note that we only send events to a single endpoint per environment.\n\n### Setting up webhooks\n\nWebhooks are configured through the [API Dashboard App](https://api-dashboard.fullscript.io). For each environment that you have setup, you can enter a URL to receive events. This should be a dedicated URL on your server that is setup to receive webhook notifications.\n\nAll urls need to use HTTPS. We will validate that your connection is secure and HIPAA compliant before sending any webhook data. For this to work, your server needs to be setup to support HTTPS with a valid certificate.\n\n### Responding to a webhook\n\nTo acknowledge that you received a webhook notification, your endpoint needs to respond with either a `200` or `201` HTTP status code. Any response codes outside of this range will tell us that the webhook has not been received and will be treated as a failure.\n\nYour endpoint's body must also respond with your challenge token (available in the [API Dashboard App](https://api-dashboard.fullscript.io)). This is a security measure to ensure that you own the url in question and it hasn't been hijacked. A successful response could look something like this:\n\n```\nHTTP 200 OK\n```\n\n```\nContent-type: application/json\n```\n\n```\n{ \"challenge\": \"your-secret-challenge-token\" }\n```\n\nWe will attempt to deliver your webhooks up to 6 times with exponential back off. Webhooks cannot manually be retried, however you can make a query to the [events endpoint](#events) to reconcile data in case of any missed events.\n\nWe will attempt to send event deliveries in order, however that is not a guarantee. We will also attempt to deliver webhooks within 30 minutes from when the event was created. In most cases however, this should be close to instantaneous.\n\nThe [webhook deliveries endpoint](#list-all-webhook-deliveries) has all the information you need to check how many times we’ve attempted to deliver an event, what the response received was, the status code, and other relevant information.\n\n### Time-outs\n\nWe set aggressive time-outs for webhook deliveries. If you have to do a bunch of complex logic with the event data, or need to make network requests, it’s possible that the delivery attempt will time-out before we receive a `2xx` HTTP status code. To mitigate this, you may want to respond immediately with a `2xx` HTTP status code, and then perform your complex logic afterwards.\n\n\n### Handling multiple clinics and integrations\n\nEach event payload comes with both a `clinic_id` and an `integration_id` (if relevant). The clinic key is the unique identifier for the clinic. Any clinic events (patient, practitioner, treatment plan, etc.) will be scoped to that clinic through the `clinic_id`.\n\nBecause it's possible for clinics to have multiple integrations enabled, the exact same events will be sent for each integration that a clinic has enabled with you. To mitigate unwanted duplication of events, the integration has to be activated before any webhook events will be sent. This means that it’s been used as least once with a valid `X-FS-Clinic-Key` and the key has not been revoked. The `integration_id` allows you to scope events to the relevant integration that is enabled.\n\nBoth the `clinic_id` and `integration_id` can be retrieved through the API at the [clinic endpoint](#retrieve-a-clinic).\n\n\n### Multiple failures\n\nIn some circumstances we will disable your endpoint and stop trying to deliver events to it. This can happen when: we receive a `410` HTTP status code or if the delivery attempts are consistently failing for more than 24 hours. In that case your webhook endpoint may be disabled and we will no longer send events to that url.\n\nRe-enabling a disabled webhook can be done through the [API Dashboard App](https://api-dashboard.fullscript.io) once you have resolved the issues.\n\nYou can see the status (both failed and successful delivery attempts) through the [webhook deliveries endpoint](#list-all-webhook-deliveries).\n\n\n### Webhook versioning\n\nWebhook events follow the same logic as our [versioning scheme](#versioning) in the API and it respects the `patch_version` that you’re on.\n\n<div id=\"webhooks-security\"></div>\n## Webhooks Security\n\n### Checking the `Fullscript-Signature` header\n\nFullscript sends a header in the webhook request that can be used in conjunction with your `Webhook Secret Key` to verify the payload. Here is an example of the header:\n\n```\nFullscript-Signature: t=1591826856,v1=0c262932b0ac6b4952e2fe24fdf419313984a66f6f442e0b8ec4cb87f2a107ad\n```\n\nThis represents the format: `t=<timestamp>,v1=<signature>`\n\nThe `signature` is generated using a hash-based message authentication code [(HMAC)](https://en.wikipedia.org/wiki/HMAC) with [SHA-256](https://en.wikipedia.org/wiki/SHA-2).\nThis hash is generated using 3 things:\n\n - A utc `timestamp`\n - The `request_body` (The POST message's JSON payload string)\n - Your `Webhook Secret Key`\n\nThe `timestamp` and `request_body` are combined to create the payload provided to the hash function. The `Webhook Secret Key` is used as the key.\nThe same hash can be computed and compared to the `signature` to verify the request.\n\n#### To recompute and compare the hash, follow these steps:\n\n - Extract the `timestamp` and `signature` from the header.\n - Create the `payload` by combining the `timestamp` and `request_body` with a single `.`\n\nExample: `payload = '1591826856.{\"event\":{...<more_json>}}'`\n\n - Compute an HMAC with the SHA256 hash function. Use the `Webhook Secret Key` as the key. Use the `payload` string as the message.\n - Compare the result with the `signature`.\n - If they match, the request payload is legitimate.\n\n**Note:** The timestamp is generated directly before we send the payload.\nIt is included in the hash payload in order to help prevent [replay attacks](https://en.wikipedia.org/wiki/Replay_attack).\nWe recommend using this to verify the age of a request with a reasonable tolerance. 5 minutes is usually a good default.\n"
    },
    {
      "name": "Events",
      "description": "Events allow your integration to stay informed with what’s happening on Fullscript. Let’s say one of your clinics updates a patient, or creates a treatment plan. In each case an `Event` will be created which allows you to take action if need be.\n\nThis `Event` has all of the relevant information about what just happened. It includes the event's type (say `treatment_plan.created`) and any relevant data to that event.\n\nNote that we only keep a record of events for the past 30 days.\n\nAlso know that events are never created for actions made through the API. We assume that, since you initiated the event, you already know about it! 😀\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "API OVERVIEW",
      "tags": [
        "Metadata",
        "Pagination",
        "Request IDs"
      ]
    },
    {
      "name": "CLINIC",
      "tags": [
        "Clinic",
        "Staff",
        "Practitioners",
        "Practitioner Types",
        "Protocols",
        "Templates"
      ]
    },
    {
      "name": "PATIENTS",
      "tags": [
        "Patients",
        "Address",
        "Orders",
        "Treatment Plans"
      ]
    },
    {
      "name": "FULLSCRIPT CATALOG",
      "tags": [
        "Products",
        "Categories",
        "Product search",
        "Allergens",
        "Brands",
        "Ingredients",
        "Supplement Types",
        "Third Party Certifications",
        "Variants"
      ]
    },
    {
      "name": "EVENTS AND WEBHOOKS",
      "tags": [
        "Webhooks",
        "Events"
      ]
    }
  ],
  "components": {
    "schemas": {
      "Allergen": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the allergen.",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the allergen."
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "number",
            "description": "The current page number of the API response."
          },
          "next_page": {
            "type": "number",
            "description": "Then next page number (if available)."
          },
          "prev_page": {
            "type": "number",
            "description": "The previous page number (if available)."
          },
          "total_pages": {
            "type": "number",
            "description": "Total number of pages that are available in the API response."
          },
          "total_count": {
            "type": "number",
            "description": "Total number of records available in the resource."
          }
        }
      },
      "Brand": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the brand.",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Commercial name of the brand."
          },
          "status": {
            "type": "string",
            "description": "The current state of a brand's products which return two possible values: `available` and `unavailable`. `available` means that this brand has some products that are in-stock and available to be ordered. `unavailable` means that this brand does not have any products in-stock. Note that this does not take into account product segmentation (where only certain practitioners have access to some brands) Please use the product search endpoint for tailored products that are available to your practitioner."
          },
          "prefix": {
            "type": "string",
            "description": "Unique prefix for the brand."
          }
        }
      },
      "Ingredient": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the ingredient.",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the ingredient."
          }
        }
      },
      "PractitionerType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the practitioner type."
          },
          "code": {
            "type": "string",
            "description": "Short code for the practitioner type."
          },
          "description": {
            "type": "string",
            "description": "Description for the practitioner type."
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the product."
          },
          "name": {
            "type": "string",
            "description": "Name of the product."
          },
          "status": {
            "type": "string",
            "description": "Status of the Product. Has 3 possible values. If any of the product variants are available, then status is `available`. If none of the product variants are available, but any 1 of the product variants is backordered then status is `backordered`. If none of the product variants are available or backordered then status is `unavailable`."
          },
          "variant_count": {
            "type": "integer",
            "description": "The number of variants that exist for this product."
          },
          "brand": {
            "type": "object",
            "description": "Brand information for the product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the brand."
              },
              "name": {
                "type": "string",
                "description": "Commercial name of the brand."
              },
              "prefix": {
                "type": "string",
                "description": "Unique prefix for the brand."
              }
            }
          },
          "description_html": {
            "type": "string",
            "description": "HTML description of the product (if available)."
          },
          "variants": {
            "type": "array",
            "description": "All available variants for the product. ",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the variant."
                },
                "sku": {
                  "type": "string",
                  "description": "Unique SKU for the variant used by Fullscript."
                },
                "units": {
                  "type": "integer",
                  "description": "Number of units in the variant (e.g. 90 capsules or 250 mL)."
                },
                "unit_of_measure": {
                  "type": "string",
                  "description": "Units of measure (e.g. capsules)."
                },
                "upc": {
                  "type": "string",
                  "description": "UPC, EAN-13, or scannable bar code."
                },
                "msrp": {
                  "type": "integer",
                  "description": "The MSRP (suggested selling price) for the product. (e.g. 19.99)"
                },
                "supplier_sku": {
                  "type": "string",
                  "description": "The Supplier SKU."
                },
                "status": {
                  "type": "string",
                  "description": "Returns the current status of the variant. (e.g. available, discontinued, backordered, unavailable, or vendor backorder)"
                },
                "availability": {
                  "type": "string",
                  "description": "Returns the availability of the variant. (e.g. In Stock)"
                }
              }
            }
          },
          "dosage": {
            "type": "object",
            "description": "Dosage information for the product.",
            "properties": {
              "recommended_amount": {
                "type": "string",
                "description": "The recommended dose to take in terms of the dosage format."
              },
              "recommended_frequency": {
                "type": "string",
                "description": "The recommended frequency with which to take the dose. This can be any of the following strings: `once per day`, `twice per day`, `three times per day`, `four times per day`, `every morning`, or `every night`."
              },
              "recommended_duration": {
                "type": "string",
                "description": "The recommended period for which to take the dose. This can be the number of days (e.g. `120` for `4 months`) or it can be any of the following strings: `as needed`, `until symptoms resolve`, or `ongoing`."
              },
              "format": {
                "type": "string",
                "description": "Format of the dose. This can be any of the following strings: `capsule`, `chewable`, `gel`, `liquid`, `lozenge`, `packet`, `pellet`, `drops`, `powder`, `strip`, `suppository`, or `tablet`."
              },
              "additional_info": {
                "type": "string",
                "description": "Recommended instructions for taking a dose (e.g. With meals)."
              }
            }
          },
          "custom_dosage": {
            "type": "object",
            "description": "Custom dosage information for the product, created by a specific practitioner. In the event that a custom dosage is not set for a product, `custom_dosage` will be `null`",
            "properties": {
              "recommended_amount": {
                "type": "string",
                "description": "The recommended dose to take in terms of the dosage format."
              },
              "recommended_frequency": {
                "type": "string",
                "description": "The recommended frequency with which to take the dose. This can be any of the following strings: `once per day`, `twice per day`, `three times per day`, `four times per day`, `every morning`, or `every night`."
              },
              "recommended_duration": {
                "type": "string",
                "description": "The recommended period for which to take the dose. This can be the number of days (e.g. `120` for `4 months`) or it can be any of the following strings: `as needed`, `until symptoms resolve`, or `ongoing`."
              },
              "format": {
                "type": "string",
                "description": "Format of the dose. This can be any of the following strings: `capsule`, `chewable`, `gel`, `liquid`, `lozenge`, `packet`, `pellet`, `drops`, `powder`, `strip`, `suppository`, or `tablet`."
              },
              "additional_info": {
                "type": "string",
                "description": "Recommended instructions for taking a dose (e.g. With meals)."
              }
            }
          }
        }
      },
      "SupplementType": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the supplement type.",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the supplement type."
          }
        }
      },
      "ThirdPartyCertification": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the third party certification.",
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the third party certification."
          }
        }
      },
      "Variant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the variant."
          },
          "sku": {
            "type": "string",
            "description": "Unique SKU for the variant used by Fullscript."
          },
          "units": {
            "type": "integer",
            "description": "Number of units in the variant (e.g. 90 capsules or 250 mL)."
          },
          "unit_of_measure": {
            "type": "string",
            "description": "Units of measure (e.g. capsules)."
          },
          "upc": {
            "type": "string",
            "description": "UPC, EAN-13, or scannable bar code."
          },
          "msrp": {
            "type": "integer",
            "description": "The MSRP (suggested selling price) for the product. (e.g. 19.99)"
          },
          "supplier_sku": {
            "type": "string",
            "description": "The Supplier SKU."
          },
          "status": {
            "type": "string",
            "description": "Returns the current status of the variant. (e.g. available, discontinued, backordered, unavailable, or vendor backorder)"
          },
          "availability": {
            "type": "string",
            "description": "Returns the availability of the variant. (e.g. In Stock)"
          },
          "primary": {
            "type": "boolean",
            "description": "Reveals whether the variant is the primary (main one used for display purposes) or not."
          },
          "image_url_small": {
            "type": "string",
            "description": "Thumbnail-sized image url of the variant."
          },
          "image_url_medium": {
            "type": "string",
            "description": "Medium-sized image url of the variant."
          },
          "image_url_large": {
            "type": "string",
            "description": "Large-sized image url of the variant."
          },
          "product": {
            "type": "array",
            "description": "The variant's product.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier of the product."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the product."
                },
                "brand": {
                  "type": "array",
                  "description": "The variant's brand information."
                }
              }
            }
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the category."
          },
          "name": {
            "type": "string",
            "description": "Name of the category."
          },
          "product_count": {
            "type": "integer",
            "description": "Number of products in a category."
          }
        }
      },
      "Clinic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the clinic."
          },
          "name": {
            "type": "string",
            "description": "Name of the clinic."
          },
          "patient_count": {
            "type": "number",
            "description": "Number of patients that belong to the clinic."
          },
          "practitioner_count": {
            "type": "number",
            "description": "Number of practitioners that belong to the clinic."
          },
          "discount": {
            "type": "number",
            "description": "Discount level of the clinic. This discount (in percentage) is the global discount level of the clinic that will be applied to all patient orders (in addition to any patient-level discount)."
          },
          "dispensary_url": {
            "type": "string",
            "description": "Patient-facing dispensary url."
          },
          "integration_id": {
            "type": "string",
            "description": "Unique identifier for the clinic's integration."
          },
          "integration_activated_at": {
            "type": "string",
            "description": "Moment in time when a clinic's integration is considered active. This happens on the very first request made using a valid `X-FS-Clinic-Key`."
          }
        }
      },
      "DynamicLink": {
        "type": "object",
        "properties": {
          "redirect_url": {
            "type": "string",
            "description": "Absolute url for a treatment plan in fullscript."
          },
          "treatment_plan": {
            "type": "object",
            "description": "Treatment plan information for dynamic link.",
            "properties": {
              "id": {
                "description": "Unique identifier of the treatment plan.",
                "type": "string"
              },
              "state": {
                "description": "The state of the treatment plan. It will have a value of `draft` or `active`.",
                "type": "string"
              },
              "available_at": {
                "description": "The date when the treatment plan was sent to the patient either through an email or text message.",
                "type": "string"
              }
            }
          },
          "patient": {
            "type": "object",
            "description": "Patient information for dynamic_link.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the patient."
              },
              "first_name": {
                "type": "string",
                "description": "First name of the patient."
              },
              "last_name": {
                "type": "string",
                "description": "Last name of the patient."
              },
              "email": {
                "type": "string",
                "description": "Unique email of the patient."
              },
              "date_of_birth": {
                "description": "Patient's date of birth in the format `yyyy-mm-dd`.",
                "type": "string"
              },
              "gender": {
                "description": "Gender of the patient. Valid options are 'male', 'female', or 'x'.",
                "type": "string"
              },
              "discount": {
                "description": "Patient discount level (in percentage). This discount does not include the clinic discount. This discount, in addition to any clinic discount, will be applied to all of the patient's orders.",
                "type": "number"
              },
              "total_discount": {
                "type": "number",
                "description": "Total patient discount level (in percentage). This discount includes the clinic discount and the patient discount. This discount is applied to all of the patient's orders."
              },
              "mobile_number": {
                "description": "Patient's mobile number in the format `+12223334444`.",
                "type": "string"
              },
              "text_message_notification": {
                "type": "boolean",
                "description": "`true` or `false` of whether the patient has elected to receive text message notifications from Fullscript."
              }
            }
          }
        }
      },
      "Metadatum": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Your system's identifier.",
            "type": "string"
          },
          "type": {
            "description": "The type of object. Can be one of `patient`, `practitioner`, `staff`, or `treatment_plan`.",
            "type": "string"
          },
          "data": {
            "description": "The object from the Fullscript system will be populated here.",
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Patient"
              },
              {
                "$ref": "#/components/schemas/Practitioner"
              },
              {
                "$ref": "#/components/schemas/Staff"
              },
              {
                "$ref": "#/components/schemas/TreatmentPlan"
              }
            ]
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the address."
          },
          "address1": {
            "type": "string",
            "description": "Street Address of the address."
          },
          "address2": {
            "type": "string",
            "description": "Apartment/Floor/Suite or Building # of the address."
          },
          "zipcode": {
            "type": "string",
            "description": "Zipcode (US) or Postal Code (Canada) of the address."
          },
          "city": {
            "type": "string",
            "description": "City of the address."
          },
          "state": {
            "type": "number",
            "description": "State (US) or Province (Canada) of the address."
          },
          "country": {
            "type": "number",
            "description": "The country of the address."
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the order."
          },
          "order_number": {
            "type": "string",
            "description": "Public order ID."
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp for when the order was completed."
          },
          "msrp_total": {
            "type": "string",
            "description": "Current total amount of an order before taxes / shipping costs."
          },
          "item_total": {
            "type": "string",
            "description": "Current total amount of an order before taxes / shipping costs but including any patient or clinic discounts (if applied)."
          },
          "payment_total": {
            "type": "string",
            "description": "Current total amount of an order including any taxes, shipping costs, and refunds."
          },
          "variant_ids": {
            "type": "array",
            "description": "Unique identifiers for the order's variants."
          },
          "treatment_plan_ids": {
            "type": "array",
            "description": "Unique identifiers for the order's treatment plans."
          },
          "line_items": {
            "type": "array",
            "description": "Individual line items on an order.",
            "items": {
              "type": "object",
              "properties": {
                "variant_id": {
                  "description": "Unique ID for the variant.",
                  "type": "string"
                },
                "quantity": {
                  "description": "Quantity of the variant.",
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "TreatmentPlan": {
        "type": "object",
        "properties": {
          "patient_id": {
            "description": "Unique ID for the Patient.",
            "type": "string"
          },
          "practitioner_id": {
            "description": "Unique ID for the Practitioner.",
            "type": "string"
          },
          "state": {
            "description": "The state of the treatment plan. It has 3 possible values `draft`, `active` or `cancelled`.",
            "type": "string"
          },
          "available_at": {
            "description": "The date when the treatment plan was sent to the patient either through an email or text message.",
            "type": "string"
          },
          "created_at": {
            "description": "Timestamp (in utc) when the Treatment Plan was created.",
            "type": "string"
          },
          "updated_at": {
            "description": "Timestamp (in utc) when the Treatment Plan was updated.",
            "type": "string"
          },
          "invitation_url": {
            "description": "Fullscript url for a patient to view their treatment plan.",
            "type": "string"
          },
          "personal_message": {
            "description": "A personal message that a practitioner can attach to the treatment plan.",
            "type": "string"
          },
          "recommendations": {
            "type": "array",
            "description": "Rx plan for a product.",
            "items": {
              "type": "object",
              "properties": {
                "variant_id": {
                  "description": "Unique ID for the Variant.",
                  "type": "string"
                },
                "units_to_purchase": {
                  "description": "Quantity (number of units) of variant to recommend.",
                  "type": "string"
                },
                "refill": {
                  "description": "Send refill reminders?",
                  "type": "boolean"
                },
                "dosage": {
                  "type": "object",
                  "description": "Dosage information for the for the recommednation.",
                  "properties": {
                    "amount": {
                      "type": "string",
                      "description": "The dose to take. Expects numbers but can include a range or a fraction (e.g. `1`, or `1-2`, or `1/2` are all valid)."
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The frequency with which to take the dose. This can be any of the following strings: `once per day`, `twice per day`, `three times per day`, `four times per day`, `every morning`, or `every night`."
                    },
                    "duration": {
                      "type": "string",
                      "description": "The period for which to take the dose. This can be the number of days (e.g. `120` for `4 months`) or it can be any of the following strings: `as needed`, `until symptoms resolve`, or `ongoing`."
                    },
                    "additional_info": {
                      "type": "string",
                      "description": "Extra instructions for taking dose (e.g. With meals)."
                    },
                    "format": {
                      "type": "string",
                      "description": "Format of the recommended dose. This can be any of the following strings: `capsule`, `chewable`, `gel`, `liquid`, `lozenge`, `packet`, `pellet`, `drops`, `powder`, `strip`, `suppository`, or `tablet`."
                    }
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata that has been attached to the treatment_plan.",
            "properties": {
              "id": {
                "description": "Your system's unique treatment_plan identifier.",
                "type": "string"
              }
            }
          }
        }
      },
      "Patient": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the patient."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the patient."
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the patient."
          },
          "email": {
            "type": "string",
            "description": "Unique email of the patient."
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of birth of the patient in the format `yyyy-mm-dd`."
          },
          "gender": {
            "type": "string",
            "description": "Gender of the patient. Valid options are 'male', 'female', or 'x'."
          },
          "discount": {
            "type": "number",
            "description": "Patient discount level (in percentage). This discount does not include the clinic discount. This discount, in addition to any clinic discount, will be applied to all of the patient's orders."
          },
          "total_discount": {
            "type": "number",
            "description": "Total patient discount level (in percentage). This discount includes the clinic discount and the patient discount. This discount is applied to all of the patient's orders."
          },
          "mobile_number": {
            "type": "string",
            "description": "Valid phone number for a patient."
          },
          "text_message_notification": {
            "type": "boolean",
            "description": "`true` or `false` of whether the patient has elected to receive text message notifications from Fullscript."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata that has been attached to the patient.",
            "properties": {
              "id": {
                "description": "Your system's unique patient identifier.",
                "type": "string"
              }
            }
          }
        }
      },
      "Practitioner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the practitioner."
          },
          "practitioner_type_id": {
            "type": "string",
            "description": "Unique Identifier for the Practitioner's Type"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the practitioner."
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the practitioner."
          },
          "email": {
            "type": "string",
            "description": "Unique email of the practitioner. Practitioner emails in Fullscript are unique."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata that has been attached to the practitioner.",
            "properties": {
              "id": {
                "description": "Your system's unique practitioner identifier.",
                "type": "string"
              }
            }
          }
        }
      },
      "Protocol": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the protocol."
          },
          "name": {
            "type": "string",
            "description": "Name of the protocol."
          },
          "current_state": {
            "type": "string",
            "description": "The state of the protocol, can be draft, active or cancelled."
          },
          "practitioner": {
            "type": "object",
            "description": "Practitioner who created the protocol.",
            "properties": {
              "id": {
                "description": "Unique identifier of the practitioner.",
                "type": "string"
              }
            }
          },
          "personal_message": {
            "description": "A personal message that a practitioner can attach to the protocol.",
            "type": "string"
          },
          "recommendations": {
            "type": "array",
            "description": "Rx plan for a product.",
            "items": {
              "type": "object",
              "properties": {
                "variant_id": {
                  "description": "Unique ID for the Variant.",
                  "type": "string"
                },
                "quantity_recommended": {
                  "description": "Quantity (number of units) of variant to recommend.",
                  "type": "string"
                },
                "refill": {
                  "description": "Send refill reminders?",
                  "type": "boolean"
                },
                "dosage_amount": {
                  "description": "The dose to take. Expects numbers but can include a range or a fraction (e.g. `1`, or `1-2`, or `1/2` are all valid).",
                  "type": "string"
                },
                "dosage_frequency": {
                  "description": "The frequency with which to take the dose. This can be any of the following strings: `once per day`, `twice per day`, `three times per day`, `four times per day`, `every morning`, or `every night`.",
                  "type": "string"
                },
                "dosage_duration": {
                  "description": "The period for which to take the dose. This can be the number of days (e.g. `120` for 4 months) or it can be any of the following strings: `as needed`, `until symptoms resolve`, or `ongoing`.",
                  "type": "string"
                },
                "dosage_permutations": {
                  "description": "Extra instructions for taking dose (e.g. With meals).",
                  "type": "string"
                },
                "dosage_format": {
                  "description": "Format of the recommended dose. This can be any of the following strings: `capsule`, `chewable`, `gel`, `liquid`, `lozenge`, `packet`, `pellet`, `powder`, `strip`, `suppository`, or `tablet`.",
                  "type": "string"
                }
              }
            }
          },
          "ownership_type": {
            "description": "Specifies whether the protocol was created by or shared with the practitioner. This can be one of the two following strings: `owned` or `shared`.",
            "type": "string"
          }
        }
      },
      "Staff": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the staff member."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the staff member."
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the staff member."
          },
          "email": {
            "type": "string",
            "description": "Unique email of the staff member. Staff emails in Fullscript are unique."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata that has been attached to the staff member.",
            "properties": {
              "id": {
                "description": "Your system's unique staff identifier.",
                "type": "string"
              }
            }
          }
        }
      },
      "Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the template."
          },
          "name": {
            "type": "string",
            "description": "Name of the template."
          },
          "current_state": {
            "type": "string",
            "description": "The state of the template, can be draft, active or cancelled."
          },
          "practitioner_id": {
            "type": "string",
            "description": "Unique identifier of the practitioner who made the template."
          },
          "personal_message": {
            "description": "A personal message that a practitioner can attach to the template.",
            "type": "string"
          },
          "recommendations": {
            "type": "array",
            "description": "Rx plan for a product.",
            "items": {
              "type": "object",
              "properties": {
                "variant_id": {
                  "description": "Unique ID for the Variant.",
                  "type": "string"
                },
                "quantity_recommended": {
                  "description": "Quantity (number of units) of variant to recommend.",
                  "type": "string"
                },
                "refill": {
                  "description": "Send refill reminders?",
                  "type": "boolean"
                },
                "dosage_amount": {
                  "description": "The dose to take. Expects numbers but can include a range or a fraction (e.g. `1`, or `1-2`, or `1/2` are all valid).",
                  "type": "string"
                },
                "dosage_frequency": {
                  "description": "The frequency with which to take the dose. This can be any of the following strings: `once per day`, `twice per day`, `three times per day`, `four times per day`, `every morning`, or `every night`.",
                  "type": "string"
                },
                "dosage_duration": {
                  "description": "The period for which to take the dose. This can be the number of days (e.g. `120` for 4 months) or it can be any of the following strings: `as needed`, `until symptoms resolve`, or `ongoing`.",
                  "type": "string"
                },
                "dosage_permutations": {
                  "description": "Extra instructions for taking dose (e.g. With meals).",
                  "type": "string"
                },
                "dosage_format": {
                  "description": "Format of the recommended dose. This can be any of the following strings: `capsule`, `chewable`, `gel`, `liquid`, `lozenge`, `packet`, `pellet`, `powder`, `strip`, `suppository`, or `tablet`.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "InOfficeCheckout": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL a practitioner can fullfill an in-office checkout."
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the event."
          },
          "type": {
            "type": "string",
            "description": "The type of event that was created."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp (in utc) when the event was created."
          },
          "clinic_id": {
            "type": "string",
            "description": "Unique identifier of the clinic that this event is scoped to (if applicable)."
          },
          "data": {
            "type": "object",
            "description": "The data attribute holds all the information for the event's object (if applicable). For example, when retrieving a `patient.created` event, the `data` attribute will have a complete patient object nested inside.\n"
          }
        }
      },
      "Oauth": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The secret token to use when making a request on behalf of the authorizing Fullscript User. The access token is sensitive information that’s similar to a user’s name and password in a single value."
          },
          "token_type": {
            "type": "string",
            "description": "The type of token. Default is `Bearer`. This value is used along with the access token when requesting API access."
          },
          "expires_in": {
            "type": "string",
            "description": "The number of seconds before the token expires. The seconds start counting from the token's `created_at` timestamp. All tokens expire in 2 hours."
          },
          "refresh_token": {
            "type": "string",
            "description": "A code used to generate a fresh access token without requiring a user to re-authorize your app when their token expires. The refresh token never expires, but is invalidated if/when authorization is revoked."
          },
          "resource_owner": {
            "type": "object",
            "description": "Details about the Fullscript user who authorized your app's access.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The resource owner’s unique Fullscript identifier (uid)."
              },
              "type": {
                "type": "string",
                "description": "Type of resource object. One of `Practitioner` or `Staff`. **Older Apps will see `Clinic`.**"
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp (in utc) when the token was created."
          }
        }
      },
      "WebhookDelivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the delivery."
          },
          "attempt_number": {
            "type": "integer",
            "description": "Number of attempts that were made for this event."
          },
          "attempted_at": {
            "type": "string",
            "description": "Timestamp (in utc) when the delivery was attempted."
          },
          "previous_attempt_at": {
            "type": "string",
            "description": "Timestamp (in utc) when the previous delivery was attempted (if any)."
          },
          "next_attempt_at": {
            "type": "string",
            "description": "Timestamp (in utc) when the next delivery attempt was scheduled (if any)."
          },
          "successfully_delivered": {
            "type": "boolean",
            "description": "`true` or `false` of whether the event has been successfully delivered."
          },
          "response_body": {
            "type": "string",
            "description": "The response body that we received from your server."
          },
          "response_header": {
            "type": "string",
            "description": "The header that we received from your server."
          },
          "response_status": {
            "type": "integer",
            "description": "The http status code that we received from your server."
          },
          "response_ip_address": {
            "type": "string",
            "description": "The IP address that we received from your server."
          },
          "response_errors": {
            "type": "string",
            "description": "Any error messages that we received while attempting to deliver to your server."
          },
          "event_payload": {
            "type": "object",
            "description": "The event object.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the event."
              },
              "type": {
                "type": "string",
                "description": "The event's type."
              },
              "created_at": {
                "type": "string",
                "description": "Timestamp (in utc) when the event was created."
              },
              "clinic_id": {
                "type": "string",
                "description": "Unique identifier of the event's clinic that this event belongs to."
              },
              "integration_id": {
                "type": "string",
                "description": "Unique identifier of the integration that this event is from (if relevant)."
              },
              "data": {
                "type": "string",
                "description": "The event's payload."
              }
            }
          }
        }
      }
    }
  }
}